{"version":3,"sources":["System/Time/DateTime.ts"],"names":[],"mappings":"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","file":"DateTime.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ICalendarDate, ITimeStamp} from \"./ITimeStamp\";\r\nimport {TimeSpan} from \"./TimeSpan\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {Milliseconds} from \"./HowMany\";\r\nimport {TimeStamp} from \"./TimeStamp\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {IComparable} from \"../IComparable\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport class DateTime implements ICalendarDate, IDateTime, IEquatable<IDateTime>, IComparable<IDateTime>\r\n{\r\n\tprivate readonly _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tthis._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t{\r\n\t\t\tthis._value = value.toJsDate();\r\n\t\t\tif(kind===VOID0) this._kind = value._kind;\r\n\t\t}\r\n\t\telse { // noinspection SuspiciousInstanceOfGuard\r\n\t\t\tif(value instanceof Date)\r\n\t\t\t\t\t\tthis._value = new Date(value.getTime());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tthis._value = value===VOID0\r\n\t\t\t\t\t\t\t? new Date()\r\n\t\t\t\t\t\t\t: new Date(value);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate readonly _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the month number (1-12).\r\n\t * @returns {number}\r\n\t */\r\n\tget calendarMonth():number\r\n\t{\r\n\t\treturn this._value.getMonth() + 1;\r\n\t}\r\n\r\n\tget calendar():ICalendarDate\r\n\t{\r\n\t\treturn {\r\n\t\t\tyear: this.year,\r\n\t\t\tmonth: this.calendarMonth,\r\n\t\t\tday: this.day\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month indexed starting at zero.\r\n\t * @returns {number}\r\n\t */\r\n\tget dayIndex():number\r\n\t{\r\n\t\treturn this._value.getDate() - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the zero indexed day of the week. (Sunday == 0)\r\n\t * @returns {number}\r\n\t */\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tconst d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth() + months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tconst d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear() + years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime|undefined;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tconst d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp\r\n\t{\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\ttoUniversalTime():DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tconst d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares a JS Date with the current instance.  Does not evaluate the kind.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:Date):boolean\r\n\r\n\t/**\r\n\t * Compares another IDateTime object and returns true if they or their value are equal.\r\n\t * @param other The other IDateTime object.\r\n\t * @param strict When strict is true, the 'kind' also must match.\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IDateTime, strict?:boolean):boolean\r\n\r\n\tequals(other:IDateTime | Date, strict:boolean = false):boolean\r\n\t{\r\n\t\tif(!other) return false;\r\n\t\tif(other==this) return true;\r\n\r\n\t\tif(other instanceof Date)\r\n\t\t{\r\n\t\t\tlet v = this._value;\r\n\t\t\treturn other==v || other.getTime()==v.getTime();\r\n\t\t}\r\n\r\n\t\tif(other instanceof DateTime)\r\n\t\t{\r\n\t\t\tif(strict)\r\n\t\t\t{\r\n\t\t\t\tlet ok = other._kind;\r\n\t\t\t\tif(!ok && this._kind || ok!=this._kind) return false;\r\n\t\t\t}\r\n\r\n\t\t\treturn this.equals(other._value);\r\n\t\t}\r\n\t\telse if(strict)\r\n\t\t\treturn false;\r\n\r\n\t\treturn this.equals(other.toJsDate());\r\n\r\n\t}\r\n\r\n\t// https://msdn.microsoft.com/en-us/library/System.IComparable.CompareTo(v=vs.110).aspx\r\n\tcompareTo(other:IDateTime | Date):number\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(\"other\");\r\n\t\tif(other==this) return 0;\r\n\r\n\t\tif(other instanceof DateTime)\r\n\t\t{\r\n\t\t\tother = other._value;\r\n\t\t}\r\n\r\n\t\tconst ms = this._value.getTime();\r\n\r\n\t\tif(other instanceof Date)\r\n\t\t{\r\n\t\t\treturn ms - other.getTime();\r\n\t\t}\r\n\r\n\t\treturn ms - other.toJsDate().getTime();\r\n\t}\r\n\r\n\tequivalent(other:IDateTime | Date):boolean\r\n\t{\r\n\t\tif(!other) return false;\r\n\t\tif(other==this) return true;\r\n\r\n\t\tif(other instanceof Date)\r\n\t\t{\r\n\t\t\tlet v = this._value;\r\n\t\t\t// TODO: What is the best way to handle this when kinds match or don't?\r\n\t\t\treturn v.toUTCString()==other.toUTCString();\r\n\t\t}\r\n\r\n\t\tif(other instanceof DateTime)\r\n\t\t{\r\n\t\t\tif(this.equals(other, true)) return true;\r\n\t\t}\r\n\r\n\t\treturn this.equivalent(other.toJsDate());\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tconst today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tconst f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t      l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(l.getTime() - f.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean\r\n\t{\r\n\t\treturn ((year%4==0) && (year%100!=0)) || (year%400==0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number\r\n\t{\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year, month + 1, 0)).getDate();\r\n\t}\r\n\r\n\tstatic from(calendarDate:ICalendarDate):DateTime;\r\n\tstatic from(year:number, month:Gregorian.Month, day:number):DateTime;\r\n\tstatic from(\r\n\t\tyearOrDate:number|ICalendarDate,\r\n\t\tmonth:number = 0,\r\n\t\tday:number = 1):DateTime\r\n\t{\r\n\t\tlet year:number;\r\n\t\tif(typeof yearOrDate==\"object\")\r\n\t\t{\r\n\t\t\tday = (<ICalendarDate>yearOrDate).day;\r\n\t\t\tmonth = (<ICalendarDate>yearOrDate).month;\r\n\t\t\tyear = (<ICalendarDate>yearOrDate).year;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tyear = yearOrDate;\r\n\t\t}\r\n\r\n\t\treturn new DateTime(new Date(year, month, day));\r\n\r\n\t}\r\n\r\n\r\n\tstatic fromCalendarDate(calendarDate:ICalendarDate):DateTime;\r\n\tstatic fromCalendarDate(year:number, month:number, day:number):DateTime;\r\n\tstatic fromCalendarDate(\r\n\t\tyearOrDate:number|ICalendarDate,\r\n\t\tmonth:number = 1,\r\n\t\tday:number = 1):DateTime\r\n\t{\r\n\t\tlet year:number;\r\n\t\tif(typeof yearOrDate==\"object\")\r\n\t\t{\r\n\t\t\tday = (<ICalendarDate>yearOrDate).day;\r\n\t\t\tmonth = (<ICalendarDate>yearOrDate).month;\r\n\t\t\tyear = (<ICalendarDate>yearOrDate).year;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tyear = yearOrDate;\r\n\t\t}\r\n\r\n\t\treturn new DateTime(new Date(year, month - 1, day));\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nexport module DateTime\r\n{\r\n\texport enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}