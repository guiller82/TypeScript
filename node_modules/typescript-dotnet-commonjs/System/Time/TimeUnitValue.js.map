{"version":3,"sources":["System/Time/TimeUnitValue.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,uCAAoC;AACpC,+CAA4C;AAE5C,yCAA4C;AAC5C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAElC;;GAEG;AACH;IAC4B,iCAAY;IAGvC,uBAAY,KAA0B,EAAU,MAAe;QAA/D,YAEC,kBAAM,OAAO,KAAK,IAAE,QAAQ;YAC3B,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,mBAAmB,CAAgB,KAAK,EAAE,MAAM,CAAC,CAAC,SAErD;QAN+C,YAAM,GAAN,MAAM,CAAS;QAK9D,mBAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;;IAC9B,CAAC;IAED,sBAAI,gCAAK;aAAT;YAEC,OAAO,IAAI,CAAC,SAAS,CAAC;QACvB,CAAC;aAED,UAAU,CAAQ;YAEjB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC;;;OANA;IAQD,4CAAoB,GAApB;QAEC,OAAO,mBAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAGD,sBAAI,gCAAK;QADT,0EAA0E;aAC1E;YAEC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;;OAAA;IAED,0BAAE,GAAF,UAAG,KAA2B;QAA3B,sBAAA,EAAA,QAAiB,IAAI,CAAC,KAAK;QAE7B,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAEM,kBAAI,GAAX,UAAY,KAA0B,EAAE,KAAsC;QAAtC,sBAAA,EAAA,QAAiB,mBAAQ,CAAC,YAAY;QAE7E,OAAO,IAAI,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAEF,oBAAC;AAAD,CA5CA,AA4CC,CA3C2B,2BAAY,GA2CvC;;AAED,6BAA6B,CAAe,EAAE,KAAc;IAE3D,OAAO,mBAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,KAAK,CAAC,CAAC;AACnE,CAAC","file":"TimeUnitValue.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof value=='number'\r\n\t\t\t? value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._quantity = v;\r\n\t\tthis._resetTotal();\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this, units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}