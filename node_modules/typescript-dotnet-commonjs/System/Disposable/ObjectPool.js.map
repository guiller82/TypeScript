{"version":3,"sources":["System/Disposable/ObjectPool.ts"],"names":[],"mappings":"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","file":"ObjectPool.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon ObjectPool from Parallel Extension Extras and other ObjectPool implementations.\r\n * Uses .add(T) and .take():T\r\n */\r\n\r\nimport {dispose} from \"./dispose\";\r\nimport {DisposableBase} from \"./DisposableBase\";\r\nimport {TaskHandler} from \"../Threading/Tasks/TaskHandler\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst\r\n\tOBJECT_POOL       = \"ObjectPool\",\r\n\t_MAX_SIZE         = \"_maxSize\",\r\n\tABSOLUTE_MAX_SIZE = 65536,\r\n\tMUST_BE_GT1       = \"Must be at valid number least 1.\",\r\n\tMUST_BE_LTM       = `Must be less than or equal to ${ABSOLUTE_MAX_SIZE}.`;\r\n\r\nexport class ObjectPool<T> extends DisposableBase\r\n{\r\n\r\n\tprivate _pool:T[];\r\n\tprivate _trimmer:TaskHandler;\r\n\tprivate _flusher:TaskHandler;\r\n\tprivate _autoFlusher:TaskHandler;\r\n\r\n\t/**\r\n\t * A transient amount of object to exist over _maxSize until trim() is called.\r\n\t * But any added objects over _localAbsMaxSize will be disposed immediately.\r\n\t */\r\n\tprivate _localAbsMaxSize:number;\r\n\r\n\t/**\r\n\t * By default will clear after 5 seconds of non-use.\r\n\t */\r\n\tautoClearTimeout:number = 5000;\r\n\r\n\tconstructor(\r\n\t\tprivate _maxSize:number,\r\n\t\tprivate _generator?:(...args:any[])=>T,\r\n\t\tprivate _recycler?:(o:T)=>void)\r\n\t{\r\n\t\tsuper(OBJECT_POOL);\r\n\t\tif(isNaN(_maxSize) || _maxSize<1)\r\n\t\t\tthrow new ArgumentOutOfRangeException(_MAX_SIZE, _maxSize, MUST_BE_GT1);\r\n\t\tif(_maxSize>ABSOLUTE_MAX_SIZE)\r\n\t\t\tthrow new ArgumentOutOfRangeException(_MAX_SIZE, _maxSize, MUST_BE_LTM);\r\n\r\n\t\tthis._localAbsMaxSize = Math.min(_maxSize*2, ABSOLUTE_MAX_SIZE);\r\n\r\n\t\tthis._pool = [];\r\n\t\tthis._trimmer = new TaskHandler(()=>this._trim());\r\n\t\tconst clear = () => this._clear();\r\n\t\tthis._flusher = new TaskHandler(clear);\r\n\t\tthis._autoFlusher = new TaskHandler(clear);\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the maximum at which trimming should allow.\r\n\t * @returns {number}\r\n\t */\r\n\tget maxSize():number\r\n\t{\r\n\t\treturn this._maxSize;\r\n\t}\r\n\r\n\t/**\r\n\t * Current number of objects in pool.\r\n\t * @returns {number}\r\n\t */\r\n\tget count():number\r\n\t{\r\n\t\tconst p = this._pool;\r\n\t\treturn p ? p.length : 0;\r\n\t}\r\n\r\n\tprotected _trim():void\r\n\t{\r\n\t\tconst pool = this._pool;\r\n\t\twhile(pool.length>this._maxSize)\r\n\t\t{\r\n\t\t\tdispose.single(<any>pool.pop(),true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Will trim ensure the pool is less than the maxSize.\r\n\t * @param defer A delay before trimming.  Will be overridden by later calls.\r\n\t */\r\n\ttrim(defer?:number):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._trimmer.start(defer);\r\n\t}\r\n\r\n\tprotected _clear():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst p = _._pool;\r\n\t\t_._trimmer.cancel();\r\n\t\t_._flusher.cancel();\r\n\t\t_._autoFlusher.cancel();\r\n\t\tdispose.these.noCopy(<any>p, true);\r\n\t\tp.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Will clear out the pool.\r\n\t * Cancels any scheduled trims when executed.\r\n\t * @param defer A delay before clearing.  Will be overridden by later calls.\r\n\t */\r\n\tclear(defer?:number):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._flusher.start(defer);\r\n\t}\r\n\r\n\ttoArrayAndClear():T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._trimmer.cancel();\r\n\t\tthis._flusher.cancel();\r\n\t\tconst p = this._pool;\r\n\t\tthis._pool = [];\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for toArrayAndClear();\r\n\t */\r\n\tdump():T[]\r\n\t{\r\n\t\treturn this.toArrayAndClear();\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _:any = this;\r\n\t\t_._generator = null;\r\n\t\t_._recycler = null;\r\n\t\tdispose(\r\n\t\t\t_._trimmer,\r\n\t\t\t_._flusher,\r\n\t\t\t_._autoFlusher\r\n\t\t);\r\n\t\t_._trimmer = null;\r\n\t\t_._flusher = null;\r\n\t\t_._autoFlusher = null;\r\n\r\n\t\t_._pool.length = 0;\r\n\t\t_._pool = null;\r\n\t}\r\n\r\n\textendAutoClear():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst t = _.autoClearTimeout;\r\n\t\tif(isFinite(t) && !_._autoFlusher.isScheduled)\r\n\t\t\t_._autoFlusher.start(t);\r\n\t}\r\n\r\n\tadd(o:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tif(_._pool.length>=_._localAbsMaxSize)\r\n\t\t{\r\n\t\t\t// Getting too big, dispose immediately...\r\n\t\t\tdispose(<any>o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(_._recycler) _._recycler(o);\r\n\t\t\t_._pool.push(o);\r\n\t\t\tconst m = _._maxSize;\r\n\t\t\tif(m<ABSOLUTE_MAX_SIZE && _._pool.length>m)\r\n\t\t\t\t_._trimmer.start(500);\r\n\t\t}\r\n\t\t_.extendAutoClear();\r\n\r\n\t}\r\n\r\n\tprivate _onTaken():void\r\n\t{\r\n\t\tconst _ = this, len = _._pool.length;\r\n\t\tif(len<=_._maxSize)\r\n\t\t\t_._trimmer.cancel();\r\n\t\tif(len)\r\n\t\t\t_.extendAutoClear();\r\n\t}\r\n\r\n\ttryTake():T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn _._pool.pop();\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._onTaken();\r\n\t\t}\r\n\t}\r\n\r\n\ttake(factory?:()=>T):T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tif(!_._generator && !factory)\r\n\t\t\tthrow new ArgumentException('factory', \"Must provide a factory if on was not provided at construction time.\");\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn _._pool.pop() || factory && factory() || _._generator!();\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._onTaken();\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default ObjectPool;\r\n"]}