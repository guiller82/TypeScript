{"version":3,"sources":["System/Timers/Timer.ts"],"names":[],"mappings":"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","file":"Timer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ICancellable} from \"../Threading/ICancellable\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\nimport {ITimer} from \"./ITimer\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A timer class that uses an Observable pattern to allow for subscribing to ticks.\r\n */\r\nexport default class Timer extends ObservableBase<number> implements ITimer, ICancellable\r\n{\r\n\r\n\tprivate _cancel:Closure | undefined;\r\n\tprivate _count:number = 0;\r\n\r\n\tconstructor(\r\n\t\tprivate _interval:number,\r\n\t\tprivate _maxCount:number = Infinity,\r\n\t\tprivate _initialDelay = _interval)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(_interval===null)\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(_interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes a new timer and starts it.\r\n\t * @param millisecondInterval\r\n\t * @param maxCount\r\n\t * @param initialDelay\r\n\t * @returns {Timer}\r\n\t */\r\n\tstatic startNew(\r\n\t\tmillisecondInterval:number,\r\n\t\tmaxCount:number = Infinity,\r\n\t\tinitialDelay:number = millisecondInterval):Timer\r\n\t{\r\n\t\tconst t = new Timer(millisecondInterval, maxCount, initialDelay);\r\n\t\tt.start();\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the timer is running.\r\n\t * @returns {boolean}\r\n\t */\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn !!this._cancel;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of times the timer has ticked (onNext);\r\n\t * @returns {number}\r\n\t */\r\n\tget count():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts the timer.\r\n\t */\r\n\tstart():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed(\"This timer has been disposed and can't be reused.\");\r\n\t\tif(!_._cancel && _._count<_._maxCount)\r\n\t\t{\r\n\t\t\t// For now, if it's isn't the start...\r\n\t\t\tif(_._count || _._initialDelay===_._interval)\r\n\t\t\t{\r\n\t\t\t\tlet i = setInterval(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._interval,\r\n\t\t\t\t\t_);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet i = setTimeout(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._initialDelay,\r\n\t\t\t\t\t_, true);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearTimeout(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Stops the timer.  Is the same as cancel.\r\n\t */\r\n\tstop():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n\r\n\t/**\r\n\t * Stops the timer and resets the count.\r\n\t */\r\n\treset():void\r\n\t{\r\n\t\tthis.stop();\r\n\t\tthis._count = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Forces the onComplete to propagate and returns the number of times the timer ticked.\r\n\t * @returns {number}\r\n\t */\r\n\tcomplete():number\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tthis._onCompleted();\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\t/**\r\n\t * Cancels the timer and returns true if the timer was running.  Returns false if already cancelled.\r\n\t * @returns {boolean}\r\n\t */\r\n\tcancel():boolean\r\n\t{\r\n\t\tif(this._cancel)\r\n\t\t{\r\n\t\t\tthis._cancel();\r\n\t\t\tthis._cancel = undefined;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tsuper._onDispose();\r\n\t}\r\n\r\n\t// We use a private static here so there's no need to create a handler every time.\r\n\tprivate static _onTick(\r\n\t\ttimer:Timer,\r\n\t\treInitTimer?:boolean):void\r\n\t{\r\n\t\tconst index      = timer._count++,\r\n\t\t      max        = timer._maxCount,\r\n\t\t      isComplete = timer._count>=max;\r\n\r\n\t\tif(reInitTimer)\r\n\t\t{\r\n\t\t\ttimer.cancel();\r\n\t\t\ttimer.start();\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer.stop();\r\n\t\t}\r\n\r\n\t\tif(index<max)\r\n\t\t{\r\n\t\t\ttimer._onNext(index);\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer._onCompleted();\r\n\t\t}\r\n\t}\r\n\r\n}"]}