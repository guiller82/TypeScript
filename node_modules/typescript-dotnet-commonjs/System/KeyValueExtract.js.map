{"version":3,"sources":["System/KeyValueExtract.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,oEAAiE;AACjE,4EAAyE;AAEzE,iCAA6B;AAE7B,IACC,KAAK,GAA8B,KAAK,CAAC,EACzC,GAAG,GAA0B,GAAG,EAChC,GAAG,GAA0B,KAAK,EAClC,KAAK,GAAwB,OAAO,EACpC,IAAI,GAAyB,MAAM,EACnC,MAAM,GAAuB,IAAI,GAAG,KAAK,EACzC,UAAU,GAAmB,IAAI,GAAG,GAAG,GAAG,KAAK,EAC/C,mBAAmB,GAAU,6DAA6D,EAC1F,mBAAmB,GAAU,yBAAyB,CAAC;AAExD,wBAA4C,GAAO;IAElD,OAAO,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAHD,wCAGC;AAED,mBAAgC,GAAQ,EAAE,IAAkB;IAAlB,qBAAA,EAAA,WAAkB;IAE3D,kBAAkB,CAAC,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;IAC1C,IAAG,GAAG,KAAG,IAAI;QACZ,MAAM,IAAI,6CAAqB,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;IAEnD,OAAO,GAAG,CAAC;AACZ,CAAC;AAPD,8BAOC;AAGD,qBAA4B,KAAoB,EAAE,IAAkB;IAAlB,qBAAA,EAAA,WAAkB;IAEnE,IAAG,KAAK,CAAC,MAAM,IAAE,CAAC;QACjB,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,0CAA0C,CAAC,CAAC;IAE/E,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC3B,CAAC;AAND,kCAMC;AAGD,4BAAsC,KAAO,EAAE,IAAW;IAEzD,IAAG,KAAK,KAAG,KAAK;QACf,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IAExD,OAAO,KAAK,CAAC;AACd,CAAC;AAND,gDAMC;AAGD,yBACC,IAA+B,EAC/B,EAAoC;IAIpC,IAAI,GAAQ,EAAE,KAAY,CAAC;IAC3B,IAAG,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EACzB;QACC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;KAC5C;SACI,IAAG,cAAc,CAAc,IAAI,CAAC,EACzC;QACC,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;KACnD;SAED;QACC,MAAM,IAAI,qCAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;KACvD;IAED,OAAO,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACvB,CAAC;AAxBD,0CAwBC;AAED,kBAAe,eAAe,CAAC","file":"KeyValueExtract.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"./Exceptions/ArgumentNullException\";\r\nimport {IKeyValuePair, KeyValuePair} from \"./KeyValuePair\";\r\nimport {Type} from \"./Types\";\r\n\r\nconst\r\n\tVOID0:undefined                  = void 0,\r\n\tDOT:string                 = '.',\r\n\tKEY:string                 = 'key',\r\n\tVALUE:string               = 'value',\r\n\tITEM:string                = 'item',\r\n\tITEM_1:string              = ITEM + '[1]',\r\n\tITEM_VALUE:string          = ITEM + DOT + VALUE,\r\n\tINVALID_KVP_MESSAGE:string = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.',\r\n\tCANNOT_BE_UNDEFINED:string = 'Cannot equal undefined.';\r\n\r\nexport function isKeyValuePair<TKey,TValue>(kvp:any):kvp is IKeyValuePair<TKey,TValue>\r\n{\r\n\treturn kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n}\r\n\r\nexport function assertKey<TKey>(key:TKey, name:string = ITEM):TKey|never\r\n{\r\n\tassertNotUndefined(key, name + DOT + KEY);\r\n\tif(key===null)\r\n\t\tthrow new ArgumentNullException(name + DOT + KEY);\r\n\r\n\treturn key;\r\n}\r\n\r\n\r\nexport function assertTuple(tuple:ArrayLike<any>, name:string = ITEM):void|never\r\n{\r\n\tif(tuple.length!=2)\r\n\t\tthrow new ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\r\n\r\n\tassertKey(tuple[0], name);\r\n}\r\n\r\n\r\nexport function assertNotUndefined<T>(value:T, name:string):T|never\r\n{\r\n\tif(value===VOID0)\r\n\t\tthrow new ArgumentException(name, CANNOT_BE_UNDEFINED);\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\nexport function extractKeyValue<TKey, TValue, TResult>(\r\n\titem:KeyValuePair<TKey, TValue>,\r\n\tto:(key:TKey, value:TValue)=>TResult):TResult\r\n{\r\n\r\n\r\n\tlet key:TKey, value:TValue;\r\n\tif(Type.isArrayLike(item))\r\n\t{\r\n\t\tassertTuple(item);\r\n\t\tkey = item[0];\r\n\t\tvalue = assertNotUndefined(item[1], ITEM_1);\r\n\t}\r\n\telse if(isKeyValuePair<TKey,TValue>(item))\r\n\t{\r\n\t\tkey = assertKey(item.key);\r\n\t\tvalue = assertNotUndefined(item.value, ITEM_VALUE);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException(ITEM, INVALID_KVP_MESSAGE);\r\n\t}\r\n\r\n\treturn to(key, value);\r\n}\r\n\r\nexport default extractKeyValue;"]}