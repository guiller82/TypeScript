{"version":3,"sources":["System/Uri/Uri.ts"],"names":[],"mappings":"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","file":"Uri.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {UriComponent} from \"./UriComponent\";\r\nimport {Scheme} from \"./Scheme\";\r\nimport {SchemeValue} from \"./SchemeValue\";\r\nimport {QueryParam} from \"./QueryParam\";\r\nimport {encode, parseToMap, Separator} from \"./QueryParams\";\r\nimport {trim} from \"../Text/Utility\";\r\nimport {Exception} from \"../Exception\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {IUri} from \"./IUri\";\r\nimport {IMap} from \"../../IMap\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {StringKeyValuePair} from \"../KeyValuePair\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {Action} from \"../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n/**\r\n * Provides an read-only model representation of a uniform resource identifier (URI) and easy access to the parts of the URI.\r\n *\r\n * The read-only model (frozen) is easier for debugging than exposing accessors for each property.\r\n * ICloneable&lt;Uri&gt; is not used to prevent unnecessary copying of values that won't change.\r\n */\r\nexport class Uri implements IUri, IEquatable<IUri>\r\n{\r\n\r\n\treadonly scheme:SchemeValue.Any | null;\r\n\treadonly userInfo:string | null;\r\n\treadonly host:string | null;\r\n\treadonly port:number | null;\r\n\treadonly path:string | null;\r\n\treadonly query:string | null;\r\n\treadonly fragment:string | null;\r\n\r\n\treadonly queryParams:IMap<Primitive|Primitive[]>;//Readonly<IMap<Primitive|Primitive[]>>;\r\n\r\n\t/**\r\n\t * @param scheme The user name, password, or other user-specific information associated with the specified URI.\r\n\t * @param userInfo The host component of this instance.\r\n\t * @param host The port number of this URI.\r\n\t * @param port The absolute path of the URI.\r\n\t * @param path The absolute path of the URI.\r\n\t * @param query Any query information included in the specified URI.\r\n\t * @param fragment The escaped URI fragment.\r\n\t */\r\n\tconstructor(\r\n\t\tscheme:SchemeValue.Any|null,\r\n\t\tuserInfo:string|null,\r\n\t\thost:string|null,\r\n\t\tport:number|null,\r\n\t\tpath:string|null,\r\n\t\tquery?:QueryParam.Convertible,\r\n\t\tfragment?:string)\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tthis.scheme = getScheme(scheme) || null;\r\n\t\tthis.userInfo = userInfo || null;\r\n\t\tthis.host = host || null;\r\n\r\n\t\tthis.port = getPort(port);\r\n\r\n\t\tthis.authority = _.getAuthority() || null;\r\n\r\n\t\tthis.path = path || null;\r\n\r\n\r\n\t\tif(!Type.isString(query))\r\n\t\t\tquery = encode(<UriComponent.Map|StringKeyValuePair<Primitive>[]>query);\r\n\r\n\t\tthis.query = formatQuery(<string>query) || null;\r\n\t\tObject.freeze(this.queryParams\r\n\t\t\t= _.query\r\n\t\t\t? parseToMap(_.query)\r\n\t\t\t: {});\r\n\r\n\t\tthis.pathAndQuery = _.getPathAndQuery() || null;\r\n\r\n\t\tthis.fragment = formatFragment(fragment) || null;\r\n\r\n\t\t// This should validate the uri...\r\n\t\tthis.absoluteUri = _.getAbsoluteUri();\r\n\r\n\t\tthis.baseUri = _.absoluteUri.replace(/[?#].*/, '');\r\n\r\n\t\t// Intended to be read-only.  Call .toMap() to get a writable copy.\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t *  Compares the values of another IUri via toString comparison.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IUri):boolean\r\n\t{\r\n\t\treturn this===other || this.absoluteUri==Uri.toString(other);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses or clones values from existing Uri values.\r\n\t * @param uri\r\n\t * @param defaults\r\n\t * @returns {Uri}\r\n\t */\r\n\tstatic from(uri:string|IUri|null|undefined, defaults?:IUri):Uri\r\n\t{\r\n\t\tconst u = Type.isString(uri)\r\n\t\t\t? Uri.parse(<string>uri) // Parsing a string should throw errors.  Null or undefined simply means empty.\r\n\t\t\t: <IUri>uri;\r\n\r\n\t\treturn new Uri(\r\n\t\t\tu && u.scheme || defaults && <any>defaults.scheme,\r\n\t\t\tu && u.userInfo || defaults && <any>defaults.userInfo,\r\n\t\t\tu && u.host || defaults && <any>defaults.host,\r\n\t\t\tu && Type.isNumber(u.port,true) ? u.port : defaults && <any>defaults.port,\r\n\t\t\tu && u.path || defaults && <any>defaults.path,\r\n\t\t\tu && u.query || defaults && <any>defaults.query,\r\n\t\t\tu && u.fragment || defaults && <any>defaults.fragment\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @returns {IUri} Will throw an exception if not able to parse.\r\n\t */\r\n\tstatic parse(url:string):IUri\r\n\r\n\tstatic parse(url:string, throwIfInvalid:true):IUri\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param throwIfInvalid Defaults to true.\r\n\t * @returns {IUri} Returns a map of the values or *null* if invalid and *throwIfInvalid* is <b>false</b>.\r\n\t */\r\n\tstatic parse(url:string, throwIfInvalid:boolean):IUri|null\r\n\tstatic parse(url:string, throwIfInvalid:boolean = true):IUri|null\r\n\t{\r\n\t\tlet result:IUri|null = null;\r\n\t\tconst ex = tryParse(url, (out) => {result = out;});\r\n\t\tif(throwIfInvalid && ex) throw ex;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param out A delegate to capture the value.\r\n\t * @returns {boolean} True if valid.  False if invalid.\r\n\t */\r\n\tstatic tryParse(url:string, out:(result:IUri)=>void):boolean\r\n\t{\r\n\t\treturn !tryParse(url, out); // return type is Exception.\r\n\t}\r\n\r\n\tstatic copyOf(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(map);\r\n\t}\r\n\r\n\tcopyTo(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(this, map);\r\n\t}\r\n\r\n\tupdateQuery(query:QueryParam.Convertible):Uri\r\n\t{\r\n\t\tconst map = this.toMap();\r\n\t\tmap.query = <any>query;\r\n\t\treturn Uri.from(map);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAbsoluteUri():string\r\n\t{\r\n\t\treturn uriToString(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAuthority():string\r\n\t{\r\n\t\treturn getAuthority(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getPathAndQuery():string\r\n\t{\r\n\t\treturn getPathAndQuery(this);\r\n\t}\r\n\r\n\t/**\r\n\t * The absolute URI.\r\n\t */\r\n\tabsoluteUri:string;\r\n\r\n\t/**\r\n\t * Gets the Domain Name System (DNS) host name or IP address and the port number for a server.\r\n\t */\r\n\treadonly authority:string | null;\r\n\r\n\t/**\r\n\t * Gets the path and Query properties separated by a question mark (?).\r\n\t */\r\n\treadonly pathAndQuery:string | null;\r\n\r\n\t/**\r\n\t * Gets the full path without the query or fragment.\r\n\t */\r\n\treadonly baseUri:string;\r\n\r\n\t/**\r\n\t * The segments that represent a path.<br/>\r\n\t * https://msdn.microsoft.com/en-us/library/system.uri.segments%28v=vs.110%29.aspx\r\n\t *\r\n\t * <h5><b>Example:</b></h5>\r\n\t * If the path value equals: ```/tree/node/index.html```<br/>\r\n\t * The result will be: ```['/','tree/','node/','index.html']```\r\n\t * @returns {string[]}\r\n\t */\r\n\tget pathSegments():string[]\r\n\t{\r\n\t\treturn this.path\r\n\t\t\t&& this.path.match(/^[/]|[^/]*[/]|[^/]+$/g)\r\n\t\t\t|| [];\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a writable copy.\r\n\t * @returns {IUri}\r\n\t */\r\n\ttoMap():IUri\r\n\t{\r\n\t\treturn this.copyTo({});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} The full absolute uri.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.absoluteUri;\r\n\t}\r\n\r\n\t/**\r\n\t * Properly converts an existing URI to a string.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic toString(uri:IUri):string\r\n\t{\r\n\t\treturn uri instanceof <any>Uri\r\n\t\t\t? (<Uri>uri).absoluteUri\r\n\t\t\t: uriToString(uri);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the authority segment of an URI.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getAuthority(uri:IUri):string\r\n\t{\r\n\t\treturn getAuthority(uri);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport enum Fields {\r\n\tscheme,\r\n\tuserInfo,\r\n\thost,\r\n\tport,\r\n\tpath,\r\n\tquery,\r\n\tfragment\r\n}\r\nObject.freeze(Fields);\r\n\r\nfunction copyUri(from:IUri, to?:IUri)\r\n{\r\n\tlet i = 0, field:string;\r\n\tif(!to) to = {};\r\n\twhile(field = Fields[i++])\r\n\t{\r\n\t\tconst value = (<any>from)[field];\r\n\t\tif(value) (<any>to)[field] = value;\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nconst SLASH = '/', SLASH2 = '//', QM = Separator.Query, HASH = '#', EMPTY = '', AT = '@';\r\n\r\nfunction getScheme(scheme:SchemeValue.Any|string|null|undefined):SchemeValue.Any|null\r\n{\r\n\tlet s:any = scheme;\r\n\tif(Type.isString(s))\r\n\t{\r\n\t\tif(!s) return null;\r\n\t\ts = trim(s)\r\n\t\t\t.toLowerCase()\r\n\t\t\t.replace(/[^a-z0-9+.-]+$/g, EMPTY);\r\n\t\tif(!s) return null;\r\n\t\tif(Scheme.isValid(s)) return s;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif(s==null) return s;\r\n\t}\r\n\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n}\r\n\r\nfunction getPort(port:number|string|null|undefined):number|null\r\n{\r\n\tif(port===0) return <number>port;\r\n\tif(!port) return null;\r\n\tlet p:number;\r\n\r\n\tif(Type.isNumber(port))\r\n\t{\r\n\t\tp = <number>port;\r\n\t\tif(p>=0 && isFinite(p))\r\n\t\t\treturn p;\r\n\t}\r\n\telse if(Type.isString(port) && (p = parseInt(<string>port)) && !isNaN(p))\r\n\t{\r\n\t\treturn getPort(p);\r\n\t}\r\n\r\n\tthrow new ArgumentException(\"port\", \"invalid value\");\r\n}\r\n\r\nfunction getAuthority(uri:IUri):string\r\n{\r\n\r\n\tif(!uri.host)\r\n\t{\r\n\t\tif(uri.userInfo)\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include user info when there is no host.');\r\n\r\n\t\tif(Type.isNumber(uri.port, true))\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include a port when there is no host.');\r\n\t}\r\n\r\n\t/*\r\n\t * [//[user:password@]host[:port]]\r\n\t */\r\n\r\n\tlet result = uri.host || EMPTY;\r\n\r\n\tif(result)\r\n\t{\r\n\t\tif(uri.userInfo) result = uri.userInfo + AT + result;\r\n\t\tif(!isNaN(<any>(uri.port))) result += ':' + uri.port;\r\n\t\tresult = SLASH2 + result;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction formatQuery(query:string|null|undefined):string|null|undefined\r\n{\r\n\treturn query && ((query.indexOf(QM)!==0 ? QM : EMPTY) + query);\r\n}\r\n\r\nfunction formatFragment(fragment:string|null|undefined):string|null|undefined\r\n{\r\n\treturn fragment && ((fragment.indexOf(HASH)!==0 ? HASH : EMPTY) + fragment);\r\n}\r\n\r\nfunction getPathAndQuery(uri:IUri):string\r\n{\r\n\r\n\tconst path  = uri.path,\r\n\t      query = uri.query;\r\n\r\n\treturn EMPTY\r\n\t\t+ (path || EMPTY)\r\n\t\t+ (formatQuery(query) || EMPTY);\r\n\r\n}\r\n\r\nfunction uriToString(uri:IUri):string\r\n{\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\t// {scheme}{authority}{path}{query}{fragment}\r\n\r\n\tconst scheme = getScheme(uri.scheme);\r\n\tlet authority = getAuthority(uri);\r\n\tconst pathAndQuery = getPathAndQuery(uri),\r\n\t      fragment     = formatFragment(uri.fragment);\r\n\r\n\tconst part1 = EMPTY\r\n\t\t+ ((scheme && (scheme + ':')) || EMPTY)\r\n\t\t+ (authority || EMPTY);\r\n\r\n\tlet part2 = EMPTY\r\n\t\t+ (pathAndQuery || EMPTY)\r\n\t\t+ (fragment || EMPTY);\r\n\r\n\tif(part1 && part2 && scheme && !authority)\r\n\t\tthrow new ArgumentException('authority', \"Cannot format schemed Uri with missing authority.\");\r\n\r\n\tif(part1 && pathAndQuery && pathAndQuery.indexOf(SLASH)!==0)\r\n\t\tpart2 = SLASH + part2;\r\n\r\n\treturn part1 + part2;\r\n\r\n}\r\n\r\n\r\nfunction tryParse(url:string, out:Action<IUri>):null|Exception\r\n{\r\n\tif(!url)\r\n\t\treturn new ArgumentException('url', 'Nothing to parse.');\r\n\r\n\r\n\t// Could use a regex here, but well follow some rules instead.\r\n\t// The intention is to 'gather' the pieces.  This isn't validation (yet).\r\n\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\tlet i:number;\r\n\tconst result:IUri = {};\r\n\r\n\t// Anything after the first # is the fragment.\r\n\ti = url.indexOf(HASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.fragment = url.substring(i + 1) || VOID0;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Anything after the first ? is the query.\r\n\ti = url.indexOf(QM);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.query = url.substring(i + 1) || VOID0;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Guarantees a separation.\r\n\ti = url.indexOf(SLASH2);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tlet scheme = trim(url.substring(0, i));\r\n\t\tconst c = /:$/;\r\n\t\tif(!c.test(scheme))\r\n\t\t\treturn new ArgumentException('url', 'Scheme was improperly formatted');\r\n\r\n\t\tscheme = trim(scheme.replace(c, EMPTY));\r\n\t\ttry\r\n\t\t{\r\n\t\t\tresult.scheme = getScheme(scheme) || VOID0;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn ex;\r\n\t\t}\r\n\r\n\t\turl = url.substring(i + 2);\r\n\t}\r\n\r\n\t// Find any path information.\r\n\ti = url.indexOf(SLASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.path = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Separate user info.\r\n\ti = url.indexOf(AT);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.userInfo = url.substring(0, i) || VOID0;\r\n\t\turl = url.substring(i + 1);\r\n\t}\r\n\r\n\t// Remaining is host and port.\r\n\ti = url.indexOf(':');\r\n\tif(i!= -1)\r\n\t{\r\n\t\tconst port = parseInt(trim(url.substring(i + 1)));\r\n\t\tif(isNaN(port))\r\n\t\t\treturn new ArgumentException('url', 'Port was invalid.');\r\n\r\n\t\tresult.port = port;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\turl = trim(url);\r\n\tif(url)\r\n\t\tresult.host = url;\r\n\r\n\tout(copyUri(result));\r\n\r\n\t// null is good! (here)\r\n\treturn null;\r\n\r\n}\r\n\r\nexport default Uri;"]}