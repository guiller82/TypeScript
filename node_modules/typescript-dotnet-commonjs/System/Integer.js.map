{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,oEAAiE;AACjE,wFAAqF;AAGrF,iBAAwB,CAAQ;IAE/B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAHD,0BAGC;AAED,WAAc,OAAO;IAEP,kBAAU,GAAU,UAAU,CAAC;IAC/B,iBAAS,GAAU,gBAAgB,CAAC;IACjD,IAAM,MAAM,wBAAmB,CAAC;IAEhC;;;;;OAKG;IACH,iBAAwB,CAAQ;QAE/B,IAAM,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;QACrB,IAAG,KAAK,CAAC,CAAC,CAAC;YACV,MAAM,sBAAsB,CAAC;QAC9B,IAAI,CAAC,KAAI,CAAC,CAAC,IAAI,MAAM,KAAI,CAAC,CAAC;YAC1B,MAAM,0CAA0C,CAAC;QAClD,OAAO,MAAM,CAAC;IACf,CAAC;IARe,eAAO,UAQtB,CAAA;IAGD;;;;OAIG;IACH,YAAmB,CAAQ;QAE1B,OAAO,OAAO,CAAC,KAAG,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC;IAHe,UAAE,KAGjB,CAAA;IAED;;;;OAIG;IACH,iBAAwB,CAAQ;QAE/B,OAAO,CAAC,KAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpB,CAAC;IAHe,eAAO,UAGtB,CAAA;IAGD;;;;;OAKG;IACH,gBAAuB,CAAQ,EAAE,YAAoB;QAEpD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QACd,IAAG,CAAC,CAAC;YACJ,MAAM,IAAI,qCAAiB,CAAC,YAAY,IAAI,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACxE,OAAO,CAAC,CAAC;IACV,CAAC;IANe,cAAM,SAMrB,CAAA;IAED;;;;;OAKG;IACH,6BAAoC,CAAQ,EAAE,YAAoB;QAEjE,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,IAAE,CAAC,CAAC;QACxC,IAAG,CAAC,CAAC;YACJ,MAAM,IAAI,yDAA2B,CAAC,YAAY,IAAI,GAAG,EAAE,CAAC,EAAE,wDAAwD,CAAC,CAAC;QACzH,OAAO,CAAC,CAAC;IACV,CAAC;IANe,2BAAmB,sBAMlC,CAAA;IAED;;;;;OAKG;IACH,wBAA+B,CAAQ,EAAE,YAAoB;QAE5D,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,GAAC,CAAC,CAAC;QACvC,IAAG,CAAC,CAAC;YACJ,MAAM,IAAI,yDAA2B,CAAC,YAAY,IAAI,GAAG,EAAE,CAAC,EAAE,4BAA4B,CAAC,CAAC;QAC7F,OAAO,CAAC,CAAC;IACV,CAAC;IANe,sBAAc,iBAM7B,CAAA;AAEF,CAAC,EAtFa,OAAO,GAAP,eAAO,KAAP,eAAO,QAsFpB;AAED,kBAAe,OAAO,CAAC","file":"Integer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"./Exceptions/ArgumentOutOfRangeException\";\r\nimport {TypeValue} from \"./TypeValue\";\r\n\r\nexport function Integer(n:number):number\r\n{\r\n\treturn Math.floor(n);\r\n}\r\n\r\nexport module Integer\r\n{\r\n\texport const MAX_32_BIT:number = 2147483647;\r\n\texport const MAX_VALUE:number = 9007199254740991;\r\n\tconst NUMBER = TypeValue.Number;\r\n\r\n\t/**\r\n\t * Converts any number to its 32bit counterpart.\r\n\t * Throws if conversion is not possible.\r\n\t * @param n\r\n\t * @returns {number}\r\n\t */\r\n\texport function as32Bit(n:number):number\r\n\t{\r\n\t\tconst result = n | 0;\r\n\t\tif(isNaN(n))\r\n\t\t\tthrow \"'n' is not a number.\";\r\n\t\tif (n!== -1 && result=== -1)\r\n\t\t\tthrow \"'n' is too large to be a 32 bit integer.\";\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns true if the value is an integer.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn typeof n===NUMBER && isFinite(n) && n===Math.floor(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value is within a 32 bit range.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is32Bit(n:number):boolean\r\n\t{\r\n\t\treturn n===(n | 0);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Throws if not an integer.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assert(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if less than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if not greater than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertPositive(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}