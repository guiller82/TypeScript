{"version":3,"sources":["System/Collections/SetBase.ts"],"names":[],"mappings":"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","file":"SetBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"./Enumeration/EmptyEnumerator\";\r\nimport {using} from \"../Disposable/dispose\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {ILinkedNodeWithValue} from \"./ILinkedListNode\";\r\nimport {ActionWithIndex, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ISet} from \"./ISet\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nconst OTHER = 'other';\r\n\r\nexport abstract class SetBase<T>\r\nextends CollectionBase<T> implements ISet<T>, IDisposable\r\n{\r\n\r\n\tprotected constructor(source?:IEnumerableOrArray<T>)\r\n\t{\r\n\t\tsuper(VOID0, areEqual);\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected abstract newUsing(source?:IEnumerableOrArray<T>):SetBase<T>;\r\n\r\n\tprotected _set:LinkedNodeList<ILinkedNodeWithValue<T>>|undefined;\r\n\r\n\tprotected _getSet():LinkedNodeList<ILinkedNodeWithValue<T>>\r\n\t{\r\n\t\tlet s = this._set;\r\n\t\tif(!s) this._set = s = new LinkedNodeList<ILinkedNodeWithValue<T>>();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._set ? this._set.unsafeCount : 0;\r\n\t}\r\n\r\n\texceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t_._incrementModified();\r\n\t\t});\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tintersectWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tconst _ = this;\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tlet s = _._set;\r\n\t\t\tif(s) s.forEach(n=>\r\n\t\t\t{\r\n\t\t\t\tif(!other.contains(n.value) && _._removeInternal(<any>n.value))\r\n\t\t\t\t\t_._incrementModified();\r\n\t\t\t},true);\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(_.newUsing(other), o=>_.intersectWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tisProperSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isProperSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isProperSupersetOf(this));\r\n\t}\r\n\r\n\tisProperSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = true, count:number;\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tresult = this.isSupersetOf(other);\r\n\t\t\tcount = other.getCount();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcount = using(this.newUsing(), o=>\r\n\t\t\t{\r\n\t\t\t\tforEach(other, v=>\r\n\t\t\t\t{\r\n\t\t\t\t\to.add(v); // We have to add to another set in order to filter out duplicates.\r\n\t\t\t\t\t// contains == false will cause this to exit.\r\n\t\t\t\t\treturn result = this.contains(v);\r\n\t\t\t\t});\r\n\t\t\t\treturn o.getCount();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result && this.getCount()>count;\r\n\t}\r\n\r\n\tisSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isSupersetOf(this));\r\n\t}\r\n\r\n\tisSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = true;\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\treturn result = this.contains(v);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\toverlaps(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = false;\r\n\t\tforEach(other, v => !(result = this.contains(v)));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetEquals(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\treturn this.getCount()==(\r\n\t\t\t\tother instanceof SetBase\r\n\t\t\t\t\t? other.getCount()\r\n\t\t\t\t\t: using(this.newUsing(other), o=> o.getCount()))\r\n\t\t\t&& this.isSubsetOf(other);\r\n\t}\r\n\r\n\tsymmetricExceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tconst _ = this;\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tforEach(other, v=>\r\n\t\t\t{\r\n\t\t\t\tif(_.contains(v))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._addInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(other), o=>_.symmetricExceptWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tunionWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tthis.importEntries(other);\r\n\t}\r\n\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn s ? s.clear() : 0;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._set = <any>null;\r\n\t}\r\n\r\n\tprotected abstract _getNode(item:T):ILinkedNodeWithValue<T>|undefined;\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn !(!this.getCount() || !this._getNode(item));\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst s = _._set;\r\n\t\treturn s && _.getCount()\r\n\t\t\t? LinkedNodeList.valueEnumeratorFrom<T>(s)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._set ? this._set.forEach((node, i)=>action(<any>node.value, i)) : 0;\r\n\t}\r\n\r\n\tprotected _removeNode(node:ILinkedNodeWithValue<T>|null|undefined):boolean\r\n\t{\r\n\t\treturn !!node\r\n\t\t\t&& this.remove(<any>node.value)!=0;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn this._removeNode(s && s.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn this._removeNode(s && s.last);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default SetBase;"]}