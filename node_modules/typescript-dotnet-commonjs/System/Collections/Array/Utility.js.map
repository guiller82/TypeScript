{"version":3,"sources":["System/Collections/Array/Utility.ts"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {Integer} from \"../../Integer\";\r\nimport {areEqual} from \"../../Compare\";\r\nimport {ArgumentException} from \"../../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\nimport {\r\n\tActionWithIndex,\r\n\tEqualityComparison,\r\n\tPredicateWithIndex,\r\n\tSelectorWithIndex\r\n} from \"../../FunctionTypes\";\r\nimport {ArrayLikeWritable} from \"./ArrayLikeWritable\";\r\nimport {initialize} from \"./initialize\";\r\nimport {copy, copyTo} from \"./copy\";\r\n\r\nexport {initialize, copy, copyTo};\r\n\r\nconst\r\n\tCBN  = 'Cannot be null.',\r\n\tCB0  = 'Cannot be zero.',\r\n\tCBL0 = 'Cannot be less than zero.',\r\n\tVFN  = 'Must be a valid finite number';\r\n\r\n\r\n/**\r\n * Checks to see where the provided array contains an item/value.\r\n * If the array value is null, then -1 is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {number}\r\n */\r\nexport function indexOf<T>(\r\n\tarray:ArrayLike<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\r\n\tconst len = array && array.length;\r\n\tif(len)\r\n\t{\r\n\t\t// NaN NEVER evaluates its equality so be careful.\r\n\t\tif(equalityComparer==areEqual && (array) instanceof (Array) && !Type.isTrueNaN(item))\r\n\t\t\treturn array.indexOf(item);\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:ArrayLike<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\treturn indexOf(array, item, equalityComparer)!= -1;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:ArrayLikeWritable<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax:number = Infinity):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\tif(!max) max = Infinity; // just in case.\r\n\r\n\tlet count = 0;\r\n\r\n\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t{\r\n\t\tif(array[i]===old)\r\n\t\t{\r\n\t\t\t(<any>array)[i] = newValue;\r\n\t\t\t++count;\r\n\t\t\tif(count==max) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param start\r\n * @param stop\r\n */\r\nexport function updateRange<T>(\r\n\tarray:ArrayLike<T>,\r\n\tvalue:T,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tif(!array) return;\r\n\tInteger.assertZeroOrGreater(start, 'start');\r\n\tif(!stop && stop!==0) stop = array.length;\r\n\tInteger.assert(stop, 'stop');\r\n\tif(stop<start) throw new ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\r\n\r\n\tfor(let i:number = start; i<stop; i++)\r\n\t{\r\n\t\t(<any>array)[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param start\r\n * @param stop\r\n */\r\nexport function clear(\r\n\tarray:ArrayLikeWritable<any>,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tupdateRange(array, null, start, stop);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:ArrayLikeWritable<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tlet len = array.length; // avoid querying .length more than once. *\r\n\tconst ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) (<any>array)[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:ArrayLike<T>, predicate:PredicateWithIndex<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\r\n\tconst len = array.length;\r\n\tif(!Type.isNumber(len, true) || len<0)\r\n\t\tthrow new ArgumentException('array', 'Does not have a valid length.');\r\n\r\n\tif((array) instanceof (Array))\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif(predicate(array[i], i))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif((i) in (array) && predicate(array[i], i))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param action\r\n */\r\nexport function forEach<T>(\r\n\tsource:ArrayLike<T>,\r\n\taction:ActionWithIndex<T>):void\r\nexport function forEach<T>(\r\n\tsource:ArrayLike<T>,\r\n\taction:PredicateWithIndex<T>):void\r\nexport function forEach<T>(\r\n\tsource:ArrayLike<T>,\r\n\taction:ActionWithIndex<T> | PredicateWithIndex<T>):void\r\n{\r\n\tif(source && action)\r\n\t{\r\n\t\t// Don't cache the length since it is possible that the underlying array changed.\r\n\t\tfor(let i = 0; i<source.length; i++)\r\n\t\t{\r\n\t\t\tif(action(source[i], i)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n */\r\nexport function applyTo<T>(target:ArrayLikeWritable<T>, fn:SelectorWithIndex<T,T>):void\r\n{\r\n\tif(target && fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; i++)\r\n\t\t{\r\n\t\t\t(<any>target)[i] = fn(target[i], i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tconst exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max:number = Infinity,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\tlet count = 0;\r\n\tif(!max || !isFinite(max))\r\n\t{\r\n\t\t// Don't track the indexes and remove in reverse.\r\n\t\tfor(let i = (array.length - 1); i>=0; i--)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// Since the user will expect it to happen in forward order...\r\n\t\tconst found:number[] = []; // indexes;\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tfound.push(i);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(count==max) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(let i = found.length - 1; i>=0; i--)\r\n\t\t{\r\n\t\t\tarray.splice(found[i], 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tconst result = initialize<T>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = element;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value.\r\n * @param first\r\n * @param count\r\n * @param step\r\n * @returns {number[]}\r\n */\r\n\r\nexport function range(\r\n\tfirst:number,\r\n\tcount:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(isNaN(first) || !isFinite(first)) throw new ArgumentOutOfRangeException('first', first, VFN);\r\n\tif(isNaN(count) || !isFinite(count)) throw new ArgumentOutOfRangeException('count', count, VFN);\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tconst result = initialize<number>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = first;\r\n\t\tfirst += step;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value excluding any numbers at or beyond the until value.\r\n * @param first\r\n * @param until\r\n * @param step\r\n * @returns {number[]}\r\n */\r\nexport function rangeUntil(\r\n\tfirst:number,\r\n\tuntil:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(step==0) throw new ArgumentOutOfRangeException('step', step, CB0);\r\n\treturn range(first, (until - first)/step, step);\r\n}\r\n\r\n/**\r\n * Returns a unique reduced set of values.\r\n * @param source\r\n */\r\nexport function distinct(source:string[]|null):string[];\r\nexport function distinct(source:number[]|null):number[];\r\nexport function distinct(source:any[]|null):any[]\r\n{\r\n\tif(!source) return []; // Allowing for null facilitates regex filtering.\r\n\tconst seen:any = {};\r\n\treturn source.filter(e => !(e in seen) && (seen[e] = true));\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tconst result:any[] = [];\r\n\tfor(let i = 0; i<a.length; i++)\r\n\t{\r\n\t\tlet x = a[i];\r\n\t\tif((x) instanceof (Array))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(let n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}