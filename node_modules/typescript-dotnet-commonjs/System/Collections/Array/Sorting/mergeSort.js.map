{"version":3,"sources":["System/Collections/Array/Sorting/mergeSort.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAGH,mFAAgF;AAChF,sCAAsC;AAGtC;;;;;GAKG;AACH,mBAAoF,MAAa;IAEhG,IAAG,CAAC,MAAM;QAAE,MAAM,IAAI,6CAAqB,CAAC,QAAQ,CAAC,CAAC;IACtD,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;IAC1B,OAAO,GAAG,GAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,oBAAU,CAAI,GAAG,CAAC,CAAC,CAAC;AAClE,CAAC;AALD,8BAKC;AAED,cACC,MAAa,EACb,KAAY,EACZ,GAAU,EACV,IAAyB;IAEzB,IAAG,GAAG,GAAG,KAAK,GAAC,CAAC,EAChB;QACC,yCAAyC;QACzC,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAC,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAEhC,kCAAkC;QAClC,KAAI,IAAI,GAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAC,GAAC,GAAG,EAAE,GAAC,EAAE,EAC9C;YACC,IAAI,CAAC,GAAC,CAAC,GAAG,MAAM,CAAC,GAAC,CAAC,CAAC;SACpB;QAED,uCAAuC;QACvC,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,MAAM,CAAC;QAErC,gEAAgE;QAChE,OAAM,CAAC,GAAC,MAAM,IAAI,CAAC,GAAC,GAAG,EACvB;YACC,MAAM,CAAC,CAAC,EAAE,CAAC;kBACR,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,CAAC;oBACjB,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;oBACX,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;SACb;QAED,sEAAsE;QACtE,OAAM,CAAC,GAAC,MAAM,EACd;YACC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;SACxB;KAED;IAED,OAAO,MAAM,CAAA;AACd,CAAC","file":"mergeSort.js","sourcesContent":["/*!\r\n * @author Sebastian Belmar / https://github.com/sebabelmar/\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * https://en.wikipedia.org/wiki/Merge_sort\r\n */\r\n\r\nimport {Primitive} from \"../../../Primitive\";\r\nimport {ArgumentNullException} from \"../../../Exceptions/ArgumentNullException\";\r\nimport {initialize} from \"../Utility\";\r\nimport {ArrayLikeWritable} from \"../ArrayLikeWritable\";\r\n\r\n/**\r\n * Merge internalSort O(n log (n))\r\n * Warning: Uses recursion.\r\n * @param target\r\n * @returns {number[]}\r\n */\r\nexport function mergeSort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(target:TArray):TArray\r\n{\r\n\tif(!target) throw new ArgumentNullException(\"target\");\r\n\tconst len = target.length;\r\n\treturn len<2 ? target : sort(target, 0, len, initialize<T>(len));\r\n}\r\n\r\nfunction sort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(\r\n\ttarget:TArray,\r\n\tstart:number,\r\n\tend:number,\r\n\ttemp:ArrayLikeWritable<T>):TArray\r\n{\r\n\tif(end - start>1)\r\n\t{\r\n\t\t// Step 1: Sort the left and right parts.\r\n\t\tconst middle = Math.floor((start + end)/2);\r\n\t\tsort(target, start, middle, temp);\r\n\t\tsort(target, middle, end, temp);\r\n\r\n\t\t// Step 2: Copy the original array\r\n\t\tfor(let i = 0, len = target.length; i<len; i++)\r\n\t\t{\r\n\t\t\ttemp[i] = target[i];\r\n\t\t}\r\n\r\n\t\t// Step 3: Create variables to traverse\r\n\t\tlet k = start, i = start, j = middle;\r\n\r\n\t\t// Step 4: Merge: Move from the temp to target integers in order\r\n\t\twhile(i<middle && j<end)\r\n\t\t{\r\n\t\t\ttarget[k++]\r\n\t\t\t\t= temp[i]>temp[j]\r\n\t\t\t\t? temp[j++]\r\n\t\t\t\t: temp[i++];\r\n\t\t}\r\n\r\n\t\t// Step 5: Finalize merging in case right side of the array is bigger.\r\n\t\twhile(i<middle)\r\n\t\t{\r\n\t\t\ttarget[k++] = temp[i++];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn target\r\n}\r\n"]}