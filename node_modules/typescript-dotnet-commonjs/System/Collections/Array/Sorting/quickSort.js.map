{"version":3,"sources":["System/Collections/Array/Sorting/quickSort.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;AAGH,mFAAgF;AAGhF;;;;;GAKG;AACH,mBAAoF,MAAa;IAEhG,IAAG,CAAC,MAAM;QAAE,MAAM,IAAI,6CAAqB,CAAC,QAAQ,CAAC,CAAC;IACtD,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;IAC1B,OAAO,MAAM,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5D,CAAC;AALD,8BAKC;AAED,cACC,MAAa,EACb,GAAU,EACV,IAAW;IAEX,IAAG,GAAG,GAAC,IAAI,EACX;QACC,qBAAqB;QACrB,IAAI,IAAI,SAAE,CAAC;QACX,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC;QAE9C,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1B,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,GAAG,GAAG,CAAC;QACZ,KAAI,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,GAAC,IAAI,EAAE,CAAC,EAAE,EAC5B;YACC,IAAG,MAAM,CAAC,CAAC,CAAC,GAAC,MAAM,CAAC,IAAI,CAAC,EACzB;gBACC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBACjB,CAAC,EAAE,CAAC;aACJ;SACD;QAED,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;KAC1B;IAED,OAAO,MAAM,CAAC;AACf,CAAC","file":"quickSort.js","sourcesContent":["/*!\r\n * @author Sebastian Belmar / https://github.com/sebabelmar/\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Primitive} from \"../../../Primitive\";\r\nimport {ArgumentNullException} from \"../../../Exceptions/ArgumentNullException\";\r\nimport {ArrayLikeWritable} from \"../ArrayLikeWritable\";\r\n\r\n/**\r\n * Quick internalSort O(n log (n))\r\n * Warning: Uses recursion.\r\n * @param target\r\n * @returns {T[]}\r\n */\r\nexport function quickSort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(target:TArray):TArray\r\n{\r\n\tif(!target) throw new ArgumentNullException(\"target\");\r\n\tconst len = target.length;\r\n\treturn target.length<2 ? target : sort(target, 0, len - 1);\r\n}\r\n\r\nfunction sort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(\r\n\ttarget:TArray,\r\n\tlow:number,\r\n\thigh:number):TArray\r\n{\r\n\tif(low<high)\r\n\t{\r\n\t\t// Partition first...\r\n\t\tlet swap:T;\r\n\t\tconst pivotIndex = Math.floor((low + high)/2);\r\n\r\n\t\tswap = target[pivotIndex];\r\n\t\ttarget[pivotIndex] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tlet i = low;\r\n\t\tfor(let j = low; j<high; j++)\r\n\t\t{\r\n\t\t\tif(target[j]<target[high])\r\n\t\t\t{\r\n\t\t\t\tswap = target[i];\r\n\t\t\t\ttarget[i] = target[j];\r\n\t\t\t\ttarget[j] = swap;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswap = target[i];\r\n\t\ttarget[i] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tsort(target, low, i - 1);\r\n\t\tsort(target, i + 1, high);\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n"]}