{"version":3,"sources":["System/Collections/Array/Compare.ts"],"names":[],"mappings":"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","file":"Compare.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as Values from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {Primitive} from \"../../Primitive\";\r\nimport {Comparison, EqualityComparison} from \"../../FunctionTypes\";\r\nimport {IComparable} from \"../../IComparable\";\r\n\r\n/*  validateSize: Utility for quick validation/invalidation of array equality.\r\n\tWhy this way?  Why not pass a closure for the last return?\r\n\tReason: Performance and avoiding the creation of new functions/closures. */\r\nfunction validateSize(a:ArrayLike<any>, b:ArrayLike<any>):boolean|number\r\n{\r\n\t// Both valid and are same object, or both are null/undefined.\r\n\tif(a && b && a===b || !a && !b)\r\n\t\treturn true;\r\n\r\n\t// At this point, at least one has to be non-null.\r\n\tif(!a || !b)\r\n\t\treturn false;\r\n\r\n\tconst len = a.length;\r\n\tif(len!==b.length)\r\n\t\treturn false;\r\n\r\n\t// If both are arrays and have zero length, they are equal.\r\n\tif(len===0)\r\n\t\treturn true;\r\n\r\n\t// Return the length for downstream processing.\r\n\treturn len;\r\n}\r\n\r\nexport function areAllEqual(\r\n\tarrays:ArrayLike<ArrayLike<any>>,\r\n\tequalityComparer?:EqualityComparison<any>):boolean\r\nexport function areAllEqual(\r\n\tarrays:ArrayLike<ArrayLike<any>>,\r\n\tstrict:boolean,\r\n\tequalityComparer?:EqualityComparison<any>):boolean\r\nexport function areAllEqual(\r\n\tarrays:ArrayLike<ArrayLike<any>>,\r\n\tstrict:boolean|EqualityComparison<any> = true,\r\n\tequalityComparer:EqualityComparison<any> = Values.areEqual):boolean\r\n{\r\n\tif(!arrays)\r\n\t\tthrow new Error(\"ArgumentNullException: 'arrays' cannot be null.\");\r\n\tif(arrays.length<2)\r\n\t\tthrow new Error(\"Cannot compare a set of arrays less than 2.\");\r\n\r\n\tif(Type.isFunction(strict)) {\r\n\t\tequalityComparer = strict;\r\n\t\tstrict = true;\r\n\t}\r\n\r\n\tconst first = arrays[0];\r\n\tfor(let i = 1, l = arrays.length; i<l; i++)\r\n\t{\r\n\t\tif(!areEqual(first, arrays[i], strict, equalityComparer))\r\n\t\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Compares two arrays for equality.\r\n * @param a\r\n * @param b\r\n * @param equalityComparer\r\n */\r\nexport function areEqual<T>(\r\n\ta:ArrayLike<T>, b:ArrayLike<T>,\r\n\tequalityComparer?:EqualityComparison<T>):boolean\r\nexport function areEqual<T>(\r\n\ta:ArrayLike<T>, b:ArrayLike<T>,\r\n\tstrict:boolean,\r\n\tequalityComparer?:EqualityComparison<T>):boolean\r\nexport function areEqual<T>(\r\n\ta:ArrayLike<T>, b:ArrayLike<T>,\r\n\tstrict:boolean|EqualityComparison<T> = true,\r\n\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n{\r\n\tconst len = validateSize(a, b);\r\n\tif(Type.isBoolean(len)) return <boolean>len;\r\n\r\n\tif(Type.isFunction(strict)) {\r\n\t\tequalityComparer = strict;\r\n\t\tstrict = true;\r\n\t}\r\n\r\n\tfor(let i = 0; i<len; i++)\r\n\t{\r\n\t\tif(!equalityComparer(a[i], b[i], strict))\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction internalSort<T>(a:ArrayLike<T>, comparer:Comparison<T>):ArrayLike<T>\r\n{\r\n\tif(!a || a.length<2) return a;\r\n\r\n\tconst len = a.length;\r\n\tlet b:T[];\r\n\tif(len>65536)\r\n\t\tb = new Array(len);\r\n\telse\r\n\t{\r\n\t\tb = [];\r\n\t\tb.length = len;\r\n\t}\r\n\tfor(let i = 0; i<len; i++)\r\n\t{\r\n\t\tb[i] = a[i];\r\n\t}\r\n\r\n\tb.sort(comparer);\r\n\treturn b;\r\n}\r\n\r\nexport function areEquivalent<T extends Primitive>(a:ArrayLike<T>, b:ArrayLike<T>):boolean;\r\nexport function areEquivalent<T>(a:ArrayLike<IComparable<T>>, b:ArrayLike<IComparable<T>>):boolean;\r\nexport function areEquivalent<T>(a:ArrayLike<T>, b:ArrayLike<T>, comparer:Comparison<T>):boolean;\r\nexport function areEquivalent<T>(\r\n\ta:ArrayLike<T>, b:ArrayLike<T>,\r\n\tcomparer:Comparison<T> = Values.compare):boolean\r\n{\r\n\tconst len = validateSize(a, b);\r\n\tif(Type.isBoolean(len)) return <boolean>len;\r\n\r\n\t// There might be a better more performant way to do this, but for the moment, this\r\n\t// works quite well.\r\n\ta = internalSort(a, comparer);\r\n\tb = internalSort(b, comparer);\r\n\r\n\tfor(let i = 0; i<len; i++)\r\n\t{\r\n\t\tif(comparer(a[i], b[i])!==0)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n"]}