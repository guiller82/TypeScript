{"version":3,"sources":["System/Collections/ReadOnlyCollectionWrapper.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,6EAA0E;AAC1E,mEAAgE;AAGhE,uDAAgE;AAChE,kCAA8B;AAC9B,yCAA4C;AAC5C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAElC;IACS,6CAAyB;IAEjC,mCAAY,UAAwC;QAApD,YAEC,iBAAO,SAiBP;QAfA,IAAG,CAAC,UAAU;YACb,MAAM,IAAI,6CAAqB,CAAC,YAAY,CAAC,CAAC;QAE/C,4DAA4D;QAC5D,IAAG,YAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAC/B;YACC,KAAI,CAAC,UAAU,GAAG,cAAM,OAAA,UAAU,CAAC,MAAM,EAAjB,CAAiB,CAAC;YAC1C,KAAI,CAAC,eAAe,GAAG,cAAM,OAAA,iBAAc,CAAC,UAAU,CAAC,EAA1B,CAA0B,CAAC;SACxD;aAED;YACC,KAAI,CAAC,UAAU,GAAG,cAAM,OAAA,UAAU,CAAC,KAAK,EAAhB,CAAgB,CAAC;YACzC,KAAI,CAAC,eAAe,GAAG,cAAM,OAAA,UAAU,CAAC,aAAa,EAAE,EAA1B,CAA0B,CAAC;SACxD;;IAEF,CAAC;IAKS,6CAAS,GAAnB;QAEC,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;IAC1B,CAAC;IAES,kDAAc,GAAxB;QAEC,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,CAAC;IAES,8CAAU,GAApB;QAEC,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAI,CAAC,UAAU,GAAQ,IAAI,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAQ,IAAI,CAAC;IAClC,CAAC;IAEF,gCAAC;AAAD,CA9CA,AA8CC,CA7CQ,+CAAsB,GA6C9B","file":"ReadOnlyCollectionWrapper.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ReadOnlyCollectionBase} from \"./ReadOnlyCollectionBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {from as enumeratorFrom} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport default class ReadOnlyCollectionWrapper<T>\r\n\textends ReadOnlyCollectionBase<T>\r\n{\r\n\tconstructor(collection:ICollection<T> | ArrayLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!collection)\r\n\t\t\tthrow new ArgumentNullException('collection');\r\n\r\n\t\t// Attempting to avoid contact with the original collection.\r\n\t\tif(Type.isArrayLike(collection))\r\n\t\t{\r\n\t\t\tthis.__getCount = () => collection.length;\r\n\t\t\tthis.__getEnumerator = () => enumeratorFrom(collection);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.__getCount = () => collection.count;\r\n\t\t\tthis.__getEnumerator = () => collection.getEnumerator();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate __getCount:() => number;\r\n\tprivate __getEnumerator:() => IEnumerator<T>;\r\n\r\n\tprotected _getCount():number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.__getCount();\r\n\t}\r\n\r\n\tprotected _getEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.__getEnumerator();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.__getCount = <any>null;\r\n\t\tthis.__getEnumerator = <any>null;\r\n\t}\r\n\r\n}\r\n"]}