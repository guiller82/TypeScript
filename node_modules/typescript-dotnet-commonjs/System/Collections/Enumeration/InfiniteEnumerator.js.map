{"version":3,"sources":["System/Collections/Enumeration/InfiniteEnumerator.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,+DAA4D;AAC5D,4CAA+C;AAC/C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAUlC;;;GAGG;AACH;IAA2C,sCAAuB;IAEjE;;;OAGG;IACH,4BAA6B,QAAgC;QAA7D,YAEC,iBAAO,SACP;QAH4B,cAAQ,GAAR,QAAQ,CAAwB;;IAG7D,CAAC;IAES,yCAAY,GAAtB;QAEC,OAAO,IAAI,CAAC,QAAQ,IAAE,IAAI,CAAC;IAC5B,CAAC;IAED,qCAAQ,GAAR;QAEC,IAAM,CAAC,GAAG,IAAI,CAAC;QACf,IAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QACrB,IAAG,CAAC,EAAE;YACL,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED,oCAAO,GAAP;QAEC,iBAAM,OAAO,WAAE,CAAC;QACV,IAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEF,yBAAC;AAAD,CAjCA,AAiCC,CAjC0C,2CAAoB,GAiC9D;AAjCY,gDAAkB;AAmC/B,kBAAe,kBAAkB,CAAC","file":"InfiniteEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * An aggregate/reduce style factory function that expects a previous value and the current index of the enumeration.\r\n */\r\nexport interface InfiniteValueFactory<T>\r\n{\r\n\t(previous:T|undefined, index:number):T;\r\n}\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n */\r\nexport class InfiniteEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * See InfiniteValueFactory\r\n\t * @param _factory\r\n\t */\r\n\tconstructor(private readonly _factory:InfiniteValueFactory<T>)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._factory!=null;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst f = _._factory;\r\n\t\tif(f) {\r\n\t\t\t_._current = f(_._current, _.incrementIndex());\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._factory = null;\r\n\t}\r\n\r\n}\r\n\r\nexport default InfiniteEnumerator;"]}