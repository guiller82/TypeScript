{"version":3,"sources":["System/Promises/LazyPromise.ts"],"names":[],"mappings":"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","file":"LazyPromise.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n\r\nimport {PromiseBase, TSDNPromise} from \"./Promise\";\r\nimport {Closure} from \"../FunctionTypes\";\r\nimport {ICancellable} from \"../Threading/ICancellable\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A promise that waits for the first then to trigger the resolver.\r\n */\r\nexport class LazyPromise<T> extends TSDNPromise<T>\r\n{\r\n\r\n\tconstructor(private _resolver:TSDNPromise.Executor<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_resolver) throw new ArgumentNullException(\"resolver\");\r\n\t\tthis._resolvedCalled = true;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolver = VOID0;\r\n\t}\r\n\r\n\tprivate _onThen():void\r\n\t{\r\n\t\tconst r = this._resolver;\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._resolver = VOID0;\r\n\t\t\tthis._resolvedCalled = false;\r\n\t\t\tthis.resolveUsing(r);\r\n\t\t}\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:TSDNPromise.Fulfill<T, TResult> | undefined | null,\r\n\t\tonRejected?:TSDNPromise.Reject<TResult> | undefined | null):PromiseBase<TResult>\r\n\t{\r\n\t\tthis._onThen();\r\n\t\treturn super.thenSynchronous(onFulfilled, onRejected);\r\n\t}\r\n\r\n\r\n\tdoneNow(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):void\r\n\t{\r\n\t\tthis._onThen();\r\n\t\tsuper.doneNow(onFulfilled, onRejected);\r\n\t}\r\n\r\n\t// NOTE: For a LazyPromise we need to be careful not to trigger the resolve for delay.\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a minimum delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// If this is already guaranteed to resolve, the go ahead and pass to the super.\r\n\t\tif(!this._resolver || this.isSettled)\r\n\t\t\treturn super.delayFromNow(milliseconds);\r\n\r\n\t\t/*\r\n\t\t * If not triggered yet, then we create a special promise\r\n\t\t * that only requests the resolution from the parent promise\r\n\t\t * if a 'then' is called to ensure the lazy pattern.\r\n\t\t */\r\n\t\tlet pass:Closure;\r\n\t\tlet timedOut:boolean = false;\r\n\r\n\t\t// Setup the timer.\r\n\t\tlet timeout = defer(() =>\r\n\t\t\t{\r\n\t\t\t\ttimedOut = true;\r\n\t\t\t\t// If the promise was requested already go ahead and pass the request on to the parent.\r\n\t\t\t\tif(pass)\r\n\t\t\t\t\tpass();\r\n\t\t\t},\r\n\t\t\tmilliseconds);\r\n\r\n\t\treturn new LazyPromise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\t// A lazy promise only enters here if something called for a resolution.\r\n\t\t\t\tpass = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.doneNow(\r\n\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\te=> reject(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\ttimeout.dispose();\r\n\t\t\t\t\ttimeout = VOID0;\r\n\t\t\t\t\tpass = VOID0;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// If the timeout completed already go ahead and pass the request on to the parent.\r\n\t\t\t\tif(timedOut)\r\n\t\t\t\t\tpass();\r\n\t\t\t\t// Otherwise wait for the timeout to do it.\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// If this is already guaranteed to resolve, the go ahead and pass to the super.\r\n\t\tif(!this._resolver || this.isSettled)\r\n\t\t\treturn super.delayAfterResolve(milliseconds);\r\n\r\n\t\t/*\r\n\t\t * If not triggered yet, then we create a special promise\r\n\t\t * that only requests the resolution from the parent promise\r\n\t\t * if a 'then' is called to ensure the lazy pattern.\r\n\t\t */\r\n\t\tlet pass:Closure;\r\n\r\n\r\n\t\t// Setup the timer.\r\n\t\tlet timeout:ICancellable;\r\n\r\n\t\tlet finalize = () =>\r\n\t\t{\r\n\t\t\tif(timeout)\r\n\t\t\t{\r\n\t\t\t\ttimeout.dispose();\r\n\t\t\t\ttimeout = VOID0;\r\n\t\t\t}\r\n\t\t\t// If the promise was requested already go ahead and pass the request on to the parent.\r\n\t\t\tif(pass)\r\n\t\t\t\tpass();\r\n\r\n\t\t\tfinalize = VOID0;\r\n\t\t};\r\n\r\n\t\t{\r\n\t\t\tlet detector = ()=>\r\n\t\t\t{\r\n\t\t\t\tif(finalize) // We may already be wrapped up so never mind!\r\n\t\t\t\t\ttimeout = defer(finalize, milliseconds);\r\n\t\t\t};\r\n\r\n\t\t\t// Calling super.doneNow does not trigger resolution.\r\n\t\t\t// This simply waits for resolution to happen.\r\n\t\t\t// Is effectively the timer by when resolution has occurred.\r\n\t\t\tsuper.doneNow(detector, detector);\r\n\t\t\t//noinspection JSUnusedAssignment\r\n\t\t\tdetector = <any>null;\r\n\t\t}\r\n\r\n\t\treturn new LazyPromise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\t// Because of the lazy nature of this promise, this could enter here at any time.\r\n\t\t\t\tif(this.isPending)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.doneNow(\r\n\t\t\t\t\t\tv=> defer(()=>resolve(v), milliseconds),\r\n\t\t\t\t\t\te=> defer(()=>reject(e), milliseconds)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tfinalize();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// We don't know when this resolved and could have happened anytime after calling this delay method.\r\n\t\t\t\t\tpass = ()=>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.doneNow(\r\n\t\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\t\te=> reject(e)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Already finalized (aka resolved after a timeout)? Go now!\r\n\t\t\t\t\tif(!finalize)\r\n\t\t\t\t\t\tpass();\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t}\r\n}\r\n\r\nexport default LazyPromise;"]}