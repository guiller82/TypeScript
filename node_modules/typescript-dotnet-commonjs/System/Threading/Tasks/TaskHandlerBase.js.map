{"version":3,"sources":["System/Threading/Tasks/TaskHandlerBase.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,kEAA+D;AAG/D,4CAA+C;AAC/C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAElC,IAAM,IAAI,GAAG,iBAAiB,CAAC;AAC/B;;GAEG;AACH;IAA8C,mCAAc;IAI3D;QAAA,YAEC,kBAAM,IAAI,CAAC,SAGX;QAFA,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,KAAI,CAAC,OAAO,kBAAqB,CAAA;;IAClC,CAAC;IAID,sBAAI,wCAAW;aAAf;YAEC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;QAC1B,CAAC;;;OAAA;IAED;;;OAGG;IACH,+BAAK,GAAL,UAAM,KAAgB;QAAhB,sBAAA,EAAA,SAAgB;QAErB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,OAAO,uBAA0B,CAAC;QACvC,IAAG,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC,CAAE,0CAA0C;QACrE,IAAG,QAAQ,CAAM,KAAK,CAAC;YACtB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC;IAED,0CAAgB,GAAhB;QAEC,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAES,mCAAS,GAAnB;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED,sBAAI,mCAAM;aAAV;YAEC,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;QACzB,CAAC;;;OAAA;IAED,4EAA4E;IAC7D,wBAAQ,GAAvB,UAAwB,CAAiB;QAExC,CAAC,CAAC,MAAM,EAAE,CAAC;QACX,CAAC,CAAC,OAAO,kBAAqB,CAAC;QAC/B,IACA;YACC,CAAC,CAAC,UAAU,EAAE,CAAC;YACf,CAAC,CAAC,OAAO,0BAA6B,CAAC;SACvC;QACD,OAAM,EAAE,EACR;YACC,CAAC,CAAC,OAAO,kBAAqB,CAAC;SAC/B;IACF,CAAC;IAIS,oCAAU,GAApB;QAEC,IAAI,CAAC,MAAM,EAAE,CAAC;QACR,IAAK,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED,gCAAM,GAAN;QAEC,IAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAC3B,IAAG,EAAE,EACL;YACC,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,OAAO,oBAAuB,CAAC;YACpC,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAGF,sBAAC;AAAD,CAvFA,AAuFC,CAvF6C,+BAAc,GAuF3D;AAvFqB,0CAAe;AAyFrC,kBAAe,eAAe,CAAC","file":"TaskHandlerBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ICancellable} from \"../ICancellable\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"TaskHandlerBase\";\r\n/**\r\n * A simple class for handling potentially repeated executions either deferred or immediate.\r\n */\r\nexport abstract class TaskHandlerBase extends DisposableBase implements ICancellable\r\n{\r\n\tprivate _status:TaskStatus;\r\n\r\n\tprotected constructor()\r\n\t{\r\n\t\tsuper(NAME);\r\n\t\tthis._timeoutId = null;\r\n\t\tthis._status = TaskStatus.Created\r\n\t}\r\n\r\n\tprivate _timeoutId:any;\r\n\r\n\tget isScheduled():boolean\r\n\t{\r\n\t\treturn !!this._timeoutId;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules/Reschedules triggering the task.\r\n\t * @param defer Optional time to wait until triggering.\r\n\t */\r\n\tstart(defer:number = 0):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.cancel();\r\n\t\tthis._status = TaskStatus.WaitingToRun;\r\n\t\tif(!(defer>0)) defer = 0;  // A negation is used to catch edge cases.\r\n\t\tif(isFinite(<any>defer))\r\n\t\t\tthis._timeoutId = setTimeout(TaskHandlerBase._handler, defer, this);\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tTaskHandlerBase._handler(this);\r\n\t}\r\n\r\n\tprotected getStatus():TaskStatus\r\n\t{\r\n\t\treturn this._status;\r\n\t}\r\n\r\n\tget status():TaskStatus\r\n\t{\r\n\t\treturn this.getStatus();\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static _handler(d:TaskHandlerBase):void\r\n\t{\r\n\t\td.cancel();\r\n\t\td._status = TaskStatus.Running;\r\n\t\ttry\r\n\t\t{\r\n\t\t\td._onExecute();\r\n\t\t\td._status = TaskStatus.RanToCompletion;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\td._status = TaskStatus.Faulted;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract _onExecute():void;\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\t(<any>this)._status = null;\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tconst id = this._timeoutId;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._timeoutId = null;\r\n\t\t\tthis._status = TaskStatus.Cancelled;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default TaskHandlerBase;"]}