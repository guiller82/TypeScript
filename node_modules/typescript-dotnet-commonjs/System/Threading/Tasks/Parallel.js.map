{"version":3,"sources":["System/Threading/Tasks/Parallel.ts"],"names":[],"mappings":"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","file":"Parallel.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Originally based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/parallel.js\r\n */\r\n\r\nimport {ArrayPromise, PromiseBase, PromiseCollection, TSDNPromise} from \"../../Promises/Promise\";\r\nimport {Type} from \"../../Types\";\r\nimport Worker from \"../Worker\";\r\nimport {WorkerLike} from \"../WorkerType\";\r\nimport {deferImmediate} from \"../deferImmediate\";\r\nimport {isNodeJS} from \"../../Environment\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"../../../IMap\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\ndeclare const navigator:any;\r\ndeclare const __dirname:string;\r\n\r\n//noinspection JSUnusedAssignment\r\nconst\r\n\tMAX_WORKERS:number = 16,\r\n\tVOID0:undefined    = void 0,\r\n\tURL                = typeof self!==Type.UNDEFINED\r\n\t\t? (self.URL ? self.URL : (<any>self).webkitURL)\r\n\t\t: null,\r\n\t_supports          = isNodeJS || !!(<any>self).Worker; // node always supports parallel\r\n\r\nexport interface ParallelOptions\r\n{\r\n\t/**\r\n\t * This is the path to the file eval.js.  This is required when running in node, and required for some browsers (IE 10) in order to work around cross-domain restrictions for web workers.  Defaults to the same location as parallel.js in node environments, and null in the browser.\r\n\t **/\r\n\tevalPath?:string;\r\n\r\n\t/**\r\n\t * The maximum number of permitted worker threads.  This will default to 4, or the number of CPUs on your computer if you're running node.\r\n\t **/\r\n\tmaxConcurrency?:number;\r\n\r\n\t/**\r\n\t * If WebWorkers are not available, whether or not to fall back to synchronous processing using setTimeout.  Defaults to true.\r\n\t **/\r\n\tallowSynchronous?:boolean;\r\n\r\n\tenv?:any\r\n\tenvNamespace?:string\r\n}\r\n\r\n//noinspection JSUnusedAssignment\r\nconst defaults:ParallelOptions = {\r\n\tevalPath: isNodeJS ? __dirname + '/eval.js' : VOID0,\r\n\tmaxConcurrency: isNodeJS\r\n\t\t? (<any>require)('os').cpus().length\r\n\t\t: (navigator.hardwareConcurrency || 4),\r\n\tallowSynchronous: true,\r\n\tenv: {},\r\n\tenvNamespace: 'env'\r\n};\r\n\r\nfunction extend<TFrom extends any,TTo extends any>(from:TFrom, to:TTo):TFrom & TTo\r\n{\r\n\tif(!to) to = <any>{};\r\n\tfor(let i of Object.keys(from))\r\n\t{\r\n\t\tif(to[i]===VOID0) to[i] = from[i];\r\n\t}\r\n\treturn <any>to;\r\n}\r\n\r\nfunction interact(\r\n\tw:WorkerLike,\r\n\tonMessage:(msg:{data:any})=>void,\r\n\tonError:(e:any)=>void,\r\n\tmessage?:any):void\r\n{\r\n\tif(onMessage) w.onmessage = onMessage;\r\n\tif(onError) w.onerror = onError;\r\n\tif(message!==VOID0) w.postMessage(message);\r\n}\r\n\r\nclass WorkerPromise<T> extends TSDNPromise<T>\r\n{\r\n\tconstructor(worker:WorkerLike, data:any)\r\n\t{\r\n\t\tsuper((resolve, reject) =>\r\n\t\t{\r\n\t\t\tinteract(\r\n\t\t\t\tworker,\r\n\t\t\t\t(response:{data:any}) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve(response.data);\r\n\t\t\t\t},\r\n\t\t\t\t(e:any) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t},\r\n\t\t\t\tdata)\r\n\t\t}, true);\r\n\t}\r\n}\r\n\r\nexport type RequireType = string | Function | {name?:string,fn:Function};\r\n\r\nmodule workers\r\n{\r\n\r\n\t/*\r\n\t * Note:\r\n\t * Currently there is nothing preventing excessive numbers of workers from being generated.\r\n\t * Eventually there will be a master pool count which will regulate these workers.\r\n\t */\r\n\r\n\tfunction getPool(key:string):ObjectPool<WorkerLike>\r\n\t{\r\n\t\tlet pool = workerPools[key];\r\n\t\tif(!pool)\r\n\t\t{\r\n\t\t\tworkerPools[key] = pool = new ObjectPool<WorkerLike>(8);\r\n\t\t\tpool.autoClearTimeout = 3000; // Fast cleanup... 1s.\r\n\t\t}\r\n\t\treturn pool;\r\n\t}\r\n\r\n\tconst workerPools:IMap<ObjectPool<WorkerLike>> = {};\r\n\r\n\texport function recycle(w:WorkerLike|null|undefined):null\r\n\t{ // always returns null.\r\n\t\tif(w)\r\n\t\t{\r\n\t\t\tw.onerror = <any>null;\r\n\t\t\tw.onmessage = <any>null;\r\n\t\t\tconst k = (<any>w).__key;\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tgetPool(k).add(w);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdeferImmediate(() => w.terminate());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\texport function tryGet(key:string):WorkerLike|undefined\r\n\t{\r\n\t\treturn getPool(key).tryTake();\r\n\t}\r\n\r\n\texport function getNew(key:string, url:string):WorkerLike\r\n\t{\r\n\t\tconst worker:any = new Worker(url);\r\n\t\tworker.__key = key;\r\n\t\tif(!worker.dispose)\r\n\t\t{\r\n\t\t\tworker.dispose = () =>\r\n\t\t\t{\r\n\t\t\t\tworker.onmessage = null;\r\n\t\t\t\tworker.onerror = null;\r\n\t\t\t\tworker.dispose = null;\r\n\t\t\t\tworker.terminate();\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn worker;\r\n\t}\r\n}\r\n\r\n\r\nexport class Parallel\r\n{\r\n\r\n\toptions:ParallelOptions;\r\n\t_requiredScripts:string[];\r\n\t_requiredFunctions:{name?:string,fn:Function}[];\r\n\r\n\tconstructor(options?:ParallelOptions)\r\n\t{\r\n\t\tthis.options = extend(defaults, options);\r\n\t\tthis._requiredScripts = [];\r\n\t\tthis._requiredFunctions = [];\r\n\r\n\t\tthis.ensureClampedMaxConcurrency();\r\n\t}\r\n\r\n\tstatic maxConcurrency(max:number):Parallel\r\n\t{\r\n\t\treturn new Parallel({maxConcurrency: max});\r\n\t}\r\n\r\n\tprotected _getWorkerSource(task:Function|string, env?:any):string\r\n\t{\r\n\t\tconst scripts = this._requiredScripts, functions = this._requiredFunctions;\r\n\t\tlet preStr = '';\r\n\r\n\t\tif(!isNodeJS && scripts.length)\r\n\t\t{\r\n\t\t\tpreStr += 'importScripts(\"' + scripts.join('\",\"') + '\");\\r\\n';\r\n\t\t}\r\n\r\n\t\tfor(let {name, fn} of functions)\r\n\t\t{\r\n\t\t\tconst source = fn.toString();\r\n\t\t\tpreStr += name\r\n\t\t\t\t? `var ${name} = ${source};`\r\n\t\t\t\t: source;\r\n\t\t}\r\n\r\n\r\n\t\tenv = JSON.stringify(env || {});\r\n\r\n\t\tconst ns = this.options.envNamespace;\r\n\r\n\t\treturn preStr + (\r\n\t\t\t\tisNodeJS\r\n\t\t\t\t\t? `process.on(\"message\", function(e) {global.${ns} = ${env};process.send(JSON.stringify((${task.toString()})(JSON.parse(e).data)))})`\r\n\t\t\t\t\t: `self.onmessage = function(e) {var global = {}; global.${ns} = ${env};self.postMessage((${task.toString()})(e.data))}`\r\n\t\t\t);\r\n\t}\r\n\r\n\trequire(...required:RequireType[]):this\r\n\t{\r\n\t\treturn this.requireThese(required);\r\n\t}\r\n\r\n\trequireThese(required:RequireType[]):this\r\n\t{\r\n\t\tfor(let a of required)\r\n\t\t{\r\n\t\t\tswitch(typeof a)\r\n\t\t\t{\r\n\t\t\t\tcase Type.STRING:\r\n\t\t\t\t\tthis._requiredScripts.push(<string>a);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\tthis._requiredFunctions.push({fn: <Function>a});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\t\tthis._requiredFunctions.push(<{name?:string,fn:Function}>a);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new TypeError(\"Invalid type.\");\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _spawnWorker(task:Function|string, env?:any):WorkerLike|undefined\r\n\t{\r\n\t\tconst src = this._getWorkerSource(task, env);\r\n\r\n\t\tif(Worker===VOID0) return VOID0;\r\n\t\tlet worker = workers.tryGet(src);\r\n\t\tif(worker) return worker;\r\n\r\n\t\tconst scripts = this._requiredScripts;\r\n\t\tlet evalPath = this.options.evalPath;\r\n\r\n\t\tif(!evalPath)\r\n\t\t{\r\n\t\t\tif(isNodeJS)\r\n\t\t\t\tthrow new Error(\"Can't use NodeJS without eval.js!\");\r\n\t\t\tif(scripts.length)\r\n\t\t\t\tthrow new Error(\"Can't use required scripts without eval.js!\");\r\n\t\t\tif(!URL)\r\n\t\t\t\tthrow new Error(\"Can't create a blob URL in this browser!\");\r\n\t\t}\r\n\r\n\t\tif(isNodeJS || scripts.length || !URL)\r\n\t\t{\r\n\t\t\tworker = workers.getNew(src, <string>evalPath);\r\n\t\t\tworker.postMessage(src);\r\n\t\t}\r\n\t\telse if(URL)\r\n\t\t{\r\n\t\t\tconst blob = new Blob([src], {type: 'text/javascript'});\r\n\t\t\tconst url = URL.createObjectURL(blob);\r\n\r\n\t\t\tworker = workers.getNew(src, url);\r\n\t\t}\r\n\r\n\t\treturn worker;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules the task to be run in the worker pool.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {TSDNPromise<U>|TSDNPromise}\r\n\t */\r\n\tstartNew<T,U>(data:T, task:(data:T) => U, env?:any):TSDNPromise<U>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst maxConcurrency = this.ensureClampedMaxConcurrency();\r\n\r\n\t\tconst worker = maxConcurrency ? _._spawnWorker(task, extend(_.options.env, env || {})) : null;\r\n\t\tif(worker)\r\n\t\t{\r\n\t\t\treturn new WorkerPromise<U>(worker, data)\r\n\t\t\t\t.finallyThis(() => workers.recycle(worker));\r\n\t\t}\r\n\r\n\t\tif(_.options.allowSynchronous)\r\n\t\t\treturn this.startLocal(data, task);\r\n\r\n\t\tthrow new Error(maxConcurrency\r\n\t\t\t?\"Workers do not exist and synchronous operation not allowed!\"\r\n\t\t\t:\"'maxConcurrency' set to 0 but 'allowSynchronous' is false.\");\r\n\t}\r\n\r\n\t/**\r\n\t * Runs the task within the local thread/process.\r\n\t * Is good for use with testing.\r\n\t * @param data\r\n\t * @param task\r\n\t * @returns {TSDNPromise<U>|TSDNPromise}\r\n\t */\r\n\tstartLocal<T,U>(data:T, task:(data:T) => U):TSDNPromise<U>\r\n\t{\r\n\t\treturn new TSDNPromise<U>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tresolve(task(data));\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e)\r\n\t\t\t\t{\r\n\t\t\t\t\treject(e);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of promises that each resolve after their task completes.\r\n\t * Provides a potential performance benefit by not waiting for all promises to resolve before proceeding to next step.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {PromiseCollection}\r\n\t */\r\n\tpipe<T,U>(data:T[], task:(data:T) => U, env?:any):PromiseCollection<U>\r\n\t{\r\n\r\n\t\t// The resultant promise collection will make an internal copy...\r\n\t\tlet result:TSDNPromise<U>[]|undefined;\r\n\r\n\t\tif(data && data.length)\r\n\t\t{\r\n\t\t\tconst len = data.length;\r\n\t\t\tconst taskString = task.toString();\r\n\t\t\tconst maxConcurrency = this.ensureClampedMaxConcurrency();\r\n\t\t\tlet error:any;\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(let w = 0; !error && i<Math.min(len, maxConcurrency); w++)\r\n\t\t\t{\r\n\t\t\t\tlet worker:WorkerLike|null|undefined = maxConcurrency ? this._spawnWorker(taskString, env) : null;\r\n\r\n\t\t\t\tif(!worker)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!this.options.allowSynchronous)\r\n\t\t\t\t\t\tthrow new Error(maxConcurrency\r\n\t\t\t\t\t\t\t?\"Workers do not exist and synchronous operation not allowed!\"\r\n\t\t\t\t\t\t\t:\"'maxConcurrency' set to 0 but 'allowSynchronous' is false.\");\r\n\r\n\t\t\t\t\t// Concurrency doesn't matter in a single thread... Just queue it all up.\r\n\t\t\t\t\treturn TSDNPromise.map(data, task);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(!result)\r\n\t\t\t\t{\r\n\t\t\t\t\t// There is a small risk that the consumer could call .resolve() which would result in a double resolution.\r\n\t\t\t\t\t// But it's important to minimize the number of objects created.\r\n\t\t\t\t\tresult = data.map(d => new TSDNPromise<U>());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet next = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(error)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(worker)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i<len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//noinspection JSReferencingMutableVariableFromClosure\r\n\t\t\t\t\t\t\tlet ii = i++, p = result![ii];\r\n\t\t\t\t\t\t\tlet wp = new WorkerPromise<U>(worker, data[ii]);\r\n\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\twp.thenSynchronous(\r\n\t\t\t\t\t\t\t\tr =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\t\t\tp.resolve(r);\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\te =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(!error)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\t\t\t\tp.reject(e);\r\n\t\t\t\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.finallyThis(() =>\r\n\t\t\t\t\t\t\t\t\twp.dispose());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn new PromiseCollection<U>(result);\r\n\t}\r\n\r\n\tprivate ensureClampedMaxConcurrency():number\r\n\t{\r\n\t\tlet {maxConcurrency} = this.options;\r\n\t\tif(maxConcurrency && maxConcurrency>MAX_WORKERS)\r\n\t\t{\r\n\t\t\tthis.options.maxConcurrency = maxConcurrency = MAX_WORKERS;\r\n\t\t\tconsole.warn(`More than ${MAX_WORKERS} workers can reach worker limits and cause unexpected results.  maxConcurrency reduced to ${MAX_WORKERS}.`);\r\n\t\t}\r\n\t\treturn (maxConcurrency || maxConcurrency===0) ? maxConcurrency : MAX_WORKERS;\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all tasks to resolve and returns a promise with the results.\r\n\t * @param data\r\n\t * @param task\r\n\t * @param env\r\n\t * @returns {ArrayPromise}\r\n\t */\r\n\tmap<T,U>(data:T[], task:(data:T) => U, env?:any):ArrayPromise<U>\r\n\t{\r\n\t\tif(!data || !data.length)\r\n\t\t\treturn ArrayPromise.fulfilled<U>([]);\r\n\r\n\t\t// Would return the same result, but has extra overhead.\r\n\t\t// return this.pipe(data,task).all();\r\n\r\n\t\tdata = data.slice(); // Never use the original.\r\n\t\treturn new ArrayPromise<U>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tconst result:U[] = [], len = data.length;\r\n\t\t\tresult.length = len;\r\n\r\n\t\t\tconst taskString = task.toString();\r\n\t\t\tlet maxConcurrency = this.ensureClampedMaxConcurrency(), error:any;\r\n\t\t\tlet i = 0, resolved = 0;\r\n\t\t\tfor(let w = 0; !error && i<Math.min(len, maxConcurrency); w++)\r\n\t\t\t{\r\n\t\t\t\tlet worker:WorkerLike|null|undefined = this._spawnWorker(taskString, env);\r\n\r\n\t\t\t\tif(!worker)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!this.options.allowSynchronous)\r\n\t\t\t\t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n\r\n\t\t\t\t\t// Concurrency doesn't matter in a single thread... Just queue it all up.\r\n\t\t\t\t\tresolve(TSDNPromise.map(data, task).all());\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet next = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(error)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(worker)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(i<len)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet ii = i++;\r\n\t\t\t\t\t\t\tlet wp = new WorkerPromise<U>(worker, data[ii]);\r\n\t\t\t\t\t\t\t//noinspection JSIgnoredPromiseFromCall\r\n\t\t\t\t\t\t\twp.thenSynchronous(\r\n\t\t\t\t\t\t\t\tr =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresult[ii] = <any>r;\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\te =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(!error)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.thenThis(() =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresolved++;\r\n\t\t\t\t\t\t\t\t\tif(resolved>len) throw Error(\"Resolved count exceeds data length.\");\r\n\t\t\t\t\t\t\t\t\tif(resolved===len) resolve(result);\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.finallyThis(() =>\r\n\t\t\t\t\t\t\t\t\twp.dispose());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tworker = workers.recycle(worker);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnext();\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n\r\n\tstatic get isSupported() { return _supports; }\r\n\r\n\tstatic options(options?:ParallelOptions):Parallel\r\n\t{\r\n\t\treturn new Parallel(options);\r\n\t}\r\n\r\n\tstatic require(...required:RequireType[]):Parallel\r\n\t{\r\n\t\treturn (new Parallel()).requireThese(required)\r\n\t}\r\n\r\n\tstatic requireThese(required:RequireType[]):Parallel\r\n\t{\r\n\t\treturn (new Parallel()).requireThese(required)\r\n\t}\r\n\r\n\tstatic startNew<T,U>(data:T, task:(data:T) => U, env?:any):PromiseBase<U>\r\n\t{\r\n\t\treturn (new Parallel()).startNew(data, task, env);\r\n\t}\r\n\r\n\t//\r\n\t// forEach<T>(data:T[], task:(data:T) => void, env?:any):PromiseBase<void>\r\n\t// {}\r\n\r\n\tstatic map<T,U>(data:T[], task:(data:T) => U, env?:any):ArrayPromise<U>\r\n\t{\r\n\t\treturn (new Parallel()).map(data, task, env);\r\n\t}\r\n}\r\n\r\n//\r\n//\r\n// \tprivate _spawnReduceWorker<N>(\r\n// \t\tdata:any,\r\n// \t\tcb:(data:N) => N,\r\n// \t\tdone:(err?:any, wrk?:WorkerLike)=>void,\r\n// \t\tenv?:any,\r\n// \t\twrk?:WorkerLike)\r\n// \t{\r\n// \t\tconst _ = this;\r\n// \t\tif(!wrk) wrk = _._spawnWorker(cb, env);\r\n//\r\n// \t\tif(wrk!==VOID0)\r\n// \t\t{\r\n// \t\t\tinteract(wrk,\r\n// \t\t\t\tmsg=>\r\n// \t\t\t\t{\r\n// \t\t\t\t\t_.data[_.data.length] = msg.data;\r\n// \t\t\t\t\tdone(null, wrk);\r\n// \t\t\t\t},\r\n// \t\t\t\te=>\r\n// \t\t\t\t{\r\n// \t\t\t\t\twrk.terminate();\r\n// \t\t\t\t\tdone(e, null);\r\n// \t\t\t\t},\r\n// \t\t\t\tdata);\r\n// \t\t}\r\n// \t\telse if(_.options.allowSynchronous)\r\n// \t\t{\r\n// \t\t\tdeferImmediate(()=>\r\n// \t\t\t{\r\n// \t\t\t\t_.data[_.data.length] = cb(data);\r\n// \t\t\t\tdone();\r\n// \t\t\t});\r\n// \t\t}\r\n// \t\telse\r\n// \t\t{\r\n// \t\t\tthrow new Error('Workers do not exist and synchronous operation not allowed!');\r\n// \t\t}\r\n// \t}\r\n//\r\n//\r\n//\r\n//\r\n// \treduce<N>(cb:(data:N[]) => N, env?:any):Parallel<T>\r\n// \t{\r\n// \t\tenv = extend(this.options.env, env || {});\r\n//\r\n// \t\tvar runningWorkers = 0;\r\n// \t\tconst _ = this;\r\n//\r\n//\r\n// \t\t_._operation = new Promise<any>((resolve, reject)=>\r\n// \t\t{\r\n//\r\n// \t\t\tconst done = (err?:any, wrk?:WorkerLike)=>\r\n// \t\t\t{\r\n// \t\t\t\t--runningWorkers;\r\n// \t\t\t\tif(err)\r\n// \t\t\t\t{\r\n// \t\t\t\t\treject(err);\r\n// \t\t\t\t}\r\n// \t\t\t\telse if(_.data.length===1 && runningWorkers===0)\r\n// \t\t\t\t{\r\n// \t\t\t\t\tresolve(_.data = _.data[0]);\r\n// \t\t\t\t\tif(wrk) wrk.terminate();\r\n// \t\t\t\t}\r\n// \t\t\t\telse if(_.data.length>1)\r\n// \t\t\t\t{\r\n// \t\t\t\t\t++runningWorkers;\r\n// \t\t\t\t\t_._spawnReduceWorker([_.data[0], _.data[1]], cb, done, env, wrk);\r\n// \t\t\t\t\t_.data.splice(0, 2);\r\n// \t\t\t\t}\r\n// \t\t\t\telse\r\n// \t\t\t\t{\r\n// \t\t\t\t\tif(wrk) wrk.terminate();\r\n// \t\t\t\t}\r\n// \t\t\t};\r\n//\r\n// \t\t\tif(_.data.length===1)\r\n// \t\t\t{\r\n// \t\t\t\tresolve(_.data[0]);\r\n// \t\t\t}\r\n// \t\t\telse\r\n// \t\t\t{\r\n// \t\t\t\tfor(var i = 0; i<_.options.maxConcurrency && i<Math.floor(_.data.length/2); ++i)\r\n// \t\t\t\t{\r\n// \t\t\t\t\t++runningWorkers;\r\n// \t\t\t\t\t_._spawnReduceWorker([_.data[i*2], _.data[i*2 + 1]], cb, done, env);\r\n// \t\t\t\t}\r\n//\r\n// \t\t\t\t_.data.splice(0, i*2);\r\n// \t\t\t}\r\n// \t\t}, true);\r\n// \t\treturn this;\r\n//\r\n// \t}\r\n\r\n\r\nexport default Parallel;\r\n"]}