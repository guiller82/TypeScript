{"version":3,"sources":["System/Threading/Tasks/Task.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,qDAAkD;AAClD,gFAA6E;AAE7E,mCAAgC;AAGhC,4CAA+C;AAC/C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAElC;;;GAGG;AACH;IAA6B,wBAAe;IAI3C,cAAY,YAAoB;QAAhC,YAEC,iBAAO,SAGP;QAFA,IAAG,CAAC,YAAY;YAAE,MAAM,IAAI,6CAAqB,CAAC,cAAc,CAAC,CAAC;QAClE,KAAI,CAAC,OAAO,GAAG,IAAI,WAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;;IAC9C,CAAC;IAES,yBAAU,GAApB;QAEC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAES,wBAAS,GAAnB;QAEC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,4CAA4C;IACxE,CAAC;IAES,uBAAQ,GAAlB;QAEC,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QACvB,OAAO,CAAC,IAAI;YACV,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;YACxB,MAAM,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;YAC3C,KAAK,EAAE,CAAC,CAAC,KAAK;SACd,CAAC;IACJ,CAAC;IAGD,oBAAK,GAAL,UAAM,KAAa;QAElB,IAAG,IAAI,CAAC,SAAS,EAAE,mBAAoB,EACvC;YACC,iBAAM,KAAK,YAAC,KAAK,CAAC,CAAC;SACnB;IACF,CAAC;IAED,+BAAgB,GAAhB;QAEC,IAAG,IAAI,CAAC,SAAS,EAAE,mBAAoB,EACvC;YACC,iBAAM,gBAAgB,WAAE,CAAC;SACzB;IACF,CAAC;IAED,sBAAI,uBAAK;aAAT;YAEC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC;;;OAAA;IAED,sBAAI,wBAAM;aAAV;YAEC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;QACzB,CAAC;;;OAAA;IAED,sBAAI,uBAAK;aAAT;YAEC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC3B,CAAC;;;OAAA;IAES,yBAAU,GAApB;QAEC,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QAEvB,IAAG,CAAC,EACJ;YACO,IAAK,CAAC,OAAO,GAAG,IAAI,CAAC;YAC3B,CAAC,CAAC,OAAO,EAAE,CAAC;SACZ;IACF,CAAC;IACF,WAAC;AAAD,CA7EA,AA6EC,CA7E4B,iCAAe,GA6E3C;AA7EY,oBAAI;AA+EjB,kBAAe,IAAI,CAAC","file":"Task.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate readonly _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tconst r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\t(<any>this)._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}