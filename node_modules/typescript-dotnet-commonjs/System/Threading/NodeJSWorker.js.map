{"version":3,"sources":["System/Threading/NodeJSWorker.ts"],"names":[],"mappings":";;AAOA,+DAA4D;AAC5D,yCAA4C;AAE5C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAElC,IAAM,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACpC,6CAA6C;AAE7C;;GAEG;AACH;IAAkC,gCAAmB;IAMpD,sBAAY,GAAU;QAAtB,YAEC,iBAAO,SAIP;QAHA,IAAM,OAAO,GAAG,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,GAAU,IAAG,OAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;QACnE,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAO,IAAG,OAAA,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC;;IACpD,CAAC;IAES,8BAAO,GAAjB,UAAkB,IAAQ;QAEzB,iBAAM,OAAO,YAAC,IAAI,CAAC,CAAC;QACpB,IAAG,IAAI,CAAC,SAAS;YAChB,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;IAE/B,CAAC;IAES,+BAAQ,GAAlB,UAAmB,KAAS;QAE3B,iBAAM,QAAQ,YAAC,KAAK,CAAC,CAAC;QACtB,IAAG,IAAI,CAAC,OAAO;YACd,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IAES,iCAAU,GAApB;QAEC,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,CAAC,4BAA4B;QAChE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,kCAAW,GAAX,UAAY,GAAO;QAElB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC;IACjD,CAAC;IAED,gCAAS,GAAT;QAEC,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IAEF,mBAAC;AAAD,CAhDA,AAgDC,CAhDiC,+BAAc,GAgD/C;AAhDY,oCAAY;AAkDzB,kBAAe,YAAY,CAAC","file":"NodeJSWorker.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/Worker.js\r\n */\r\n///<reference types=\"node\"/>\r\nimport {WorkerLike} from \"./WorkerType\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Action} from \"../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst ps = require(\"child_process\");\r\n//import {ChildProcess} from \"child_process\";\r\n\r\n/**\r\n * This class takes the place of a WebWorker\r\n */\r\nexport class NodeJSWorker extends ObservableBase<any> implements WorkerLike\r\n{\r\n\tprivate _process:any;\r\n\tonmessage:Action<{data:any}>|null|undefined;\r\n\tonerror:Action<any>|null|undefined;\r\n\r\n\tconstructor(url:string)\r\n\t{\r\n\t\tsuper();\r\n\t\tconst process = this._process = ps.fork(url);\r\n\t\tprocess.on('message', (msg:string)=>this._onNext(JSON.parse(msg)));\r\n\t\tprocess.on('error', (err:any)=>this._onError(err));\r\n\t}\r\n\r\n\tprotected _onNext(data:any):void\r\n\t{\r\n\t\tsuper._onNext(data);\r\n\t\tif(this.onmessage)\r\n\t\t\tthis.onmessage({data: data});\r\n\r\n\t}\r\n\r\n\tprotected _onError(error:any):void\r\n\t{\r\n\t\tsuper._onError(error);\r\n\t\tif(this.onerror)\r\n\t\t\tthis.onerror(error);\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._process.removeAllListeners(); // just to satisfy paranoia.\r\n\t\tthis._process.kill();\r\n\t\tthis._process = null;\r\n\t}\r\n\r\n\tpostMessage(obj:any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._process.send(JSON.stringify({data: obj}));\r\n\t}\r\n\r\n\tterminate()\r\n\t{\r\n\t\tthis.dispose();\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeJSWorker;\r\n"]}