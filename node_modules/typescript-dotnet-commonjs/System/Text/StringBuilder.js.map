{"version":3,"sources":["System/Text/StringBuilder.ts"],"names":[],"mappings":"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","file":"StringBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\nconst EMPTY = \"\";\r\nconst NEWLINE = \"\\r\\n\";\r\n\r\nexport class StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate readonly _partArray:any[];\r\n\tprivate _latest:string|null; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tthis._latest = null;\r\n\t\tthis._partArray = [];\r\n\t\tthis.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!=null)\r\n\t\t{\r\n\t\t\tconst _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item)\r\n\t\t\t{\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\titems.forEach(\r\n\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(NEWLINE);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty():boolean\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\tlet latest = this._latest;\r\n\t\tif(latest==null)\r\n\t\t\tthis._latest = latest = this._partArray.join(EMPTY);\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n\r\nexport default StringBuilder;\r\n"]}