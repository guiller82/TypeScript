{"version":3,"sources":["System/Text/Padding.ts"],"names":[],"mappings":";;AAAA,kCAA8B;AAC9B,qCAAwC;AAExC,IAAM,KAAK,GAAG,GAAG,CAAC;AAClB,IAAM,IAAI,GAAG,GAAG,CAAC;AAEjB,uBAA8B,MAAa,EAAE,SAAgB,EAAE,GAAkB;IAAlB,oBAAA,EAAA,WAAkB;IAEhF,OAAO,GAAG,IAAI,SAAS,GAAC,CAAC;QACxB,CAAC,CAAC,CAAC,gBAAM,CAAC,GAAG,EAAE,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;QACnD,CAAC,CAAC,MAAM,CAAC;AACX,CAAC;AALD,sCAKC;AAED,wBAA+B,MAAa,EAAE,SAAgB,EAAE,GAAkB;IAAlB,oBAAA,EAAA,WAAkB;IAEjF,OAAO,GAAG,IAAI,SAAS,GAAC,CAAC;QACxB,CAAC,CAAC,CAAC,MAAM,GAAG,gBAAM,CAAC,GAAG,EAAE,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC,CAAC,MAAM,CAAC;AACX,CAAC;AALD,wCAKC;AAED,uBAA8B,MAAa,EAAE,SAAgB,EAAE,GAAwB;IAAxB,oBAAA,EAAA,UAAwB;IAEtF,IAAG,CAAC,YAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAE3C,IAAG,CAAC,MAAM;QAAE,MAAM,GAAG,CAAC,CAAC;IAEvB,OAAO,aAAa,CAAC,MAAM,GAAG,eAAK,EAAE,SAAS,EAAE,GAAG,GAAG,eAAK,CAAC,CAAC;AAC9D,CAAC;AARD,sCAQC;AAGD,wBAA+B,MAAa,EAAE,SAAgB,EAAE,GAAwB;IAAxB,oBAAA,EAAA,UAAwB;IAEvF,IAAG,CAAC,YAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAE3C,IAAG,CAAC,MAAM;QAAE,MAAM,GAAG,CAAC,CAAC;IAEvB,OAAO,cAAc,CAAC,MAAM,GAAG,eAAK,EAAE,SAAS,EAAE,GAAG,GAAG,eAAK,CAAC,CAAC;AAC/D,CAAC;AARD,wCAQC;AAID,iBAAwB,MAAoB,EAAE,SAAgB,EAAE,GAAQ;IAEvE,IAAG,YAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAAE,OAAO,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;IACvE,IAAG,YAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC;QAAE,OAAO,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;IAC7E,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;AACzC,CAAC;AALD,0BAKC;AAID,kBAAyB,MAAoB,EAAE,SAAgB,EAAE,GAAQ;IAExE,IAAG,YAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAAE,OAAO,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;IACxE,IAAG,YAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC;QAAE,OAAO,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;IAC9E,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;AACzC,CAAC;AALD,4BAKC","file":"Padding.js","sourcesContent":["import {Type} from \"../Types\";\r\nimport {repeat, EMPTY} from \"./Utility\";\r\n\r\nconst SPACE = ' ';\r\nconst ZERO = '0';\r\n\r\nexport function padStringLeft(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (repeat(pad, minLength - source.length) + source)\r\n\t\t: source;\r\n}\r\n\r\nexport function padStringRight(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (source + repeat(pad, minLength - source.length))\r\n\t\t: source;\r\n}\r\n\r\nexport function padNumberLeft(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source, true))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringLeft(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\n\r\nexport function padNumberRight(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source, true))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringRight(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\nexport function padLeft(source:string, minLength:number, pad?:string):string\r\nexport function padLeft(source:number, minLength:number, pad?:string|number):string\r\nexport function padLeft(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringLeft(source, minLength, pad);\r\n\tif(Type.isNumber(source, true)) return padNumberLeft(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}\r\n\r\nexport function padRight(source:string, minLength:number, pad?:string):string\r\nexport function padRight(source:number, minLength:number, pad?:string|number):string\r\nexport function padRight(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringRight(source, minLength, pad);\r\n\tif(Type.isNumber(source, true)) return padNumberRight(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}"]}