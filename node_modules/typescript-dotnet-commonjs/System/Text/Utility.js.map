{"version":3,"sources":["System/Text/Utility.ts"],"names":[],"mappings":"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","file":"Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\n\r\nexport const EMPTY:string = '';\r\n\r\n\r\n\r\n/**\r\n * Returns a numerical (integer) hash code of the string.  Can be used for identifying inequality of contents, but two different strings in rare cases will have the same hash code.\r\n * @param source\r\n * @returns {number}\r\n */\r\nexport function getHashCode(source:string):number\r\n{\r\n\tlet hash = 0 | 0;\r\n\tif(source.length==0) return hash;\r\n\tfor(let i = 0, l = source.length; i<l; i++)\r\n\t{\r\n\t\tlet ch = source.charCodeAt(i);\r\n\t\thash = ((hash<<5) - hash) + ch;\r\n\t\thash |= 0; // Convert to 32bit integer\r\n\t}\r\n\treturn hash;\r\n}\r\n\r\nexport function repeat(source:string, count:number):string\r\n{\r\n\tlet result = EMPTY;\r\n\tif(!isNaN(count))\r\n\t{\r\n\t\tfor(let i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tresult += source;\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport function fromChars(ch:number, count:number):string\r\nexport function fromChars(chars:number[]):string\r\nexport function fromChars(chOrChars:any, count:number = 1):string\r\n{\r\n\tif((chOrChars)instanceof(Array))\r\n\t{\r\n\t\tlet result = EMPTY;\r\n\t\tfor(let char of chOrChars)\r\n\t\t{\r\n\t\t\tresult += String.fromCharCode(char);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn repeat(String.fromCharCode(chOrChars), count);\r\n\t}\r\n}\r\n\r\n/**\r\n * Escapes a RegExp sequence.\r\n * @param source\r\n * @returns {string}\r\n */\r\nexport function escapeRegExp(source:string):string\r\n{\r\n\treturn source.replace(/[-[\\]\\/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\r\n}\r\n\r\n/**\r\n * Can trim any character or set of characters from the ends of a string.\r\n * Uses a Regex escapement to replace them with empty.\r\n * @param source\r\n * @param chars A string or array of characters desired to be trimmed.\r\n * @param ignoreCase\r\n * @returns {string}\r\n */\r\nexport function trim(source:string, chars?:string|string[], ignoreCase?:boolean):string\r\n{\r\n\tif(chars===EMPTY) return source;\r\n\tif(chars)\r\n\t{\r\n\t\tconst escaped = escapeRegExp((chars)instanceof(Array) ? chars.join() : <string>chars);\r\n\t\treturn source.replace(new RegExp('^[' + escaped + ']+|[' + escaped + ']+$', 'g' + (ignoreCase\r\n\t\t\t\t? 'i'\r\n\t\t\t\t: '')), EMPTY);\r\n\t}\r\n\r\n\treturn source.replace(/^\\s+|\\s+$/g, EMPTY);\r\n}\r\n\r\n/**\r\n * Takes any arg\r\n * @param source\r\n * @param args\r\n * @returns {string}\r\n */\r\nexport function format(source:string, ...args:any[])\r\n{\r\n\treturn supplant(source, args);\r\n}\r\n\r\n//\r\n\r\n/**\r\n * This takes a string and replaces '{string}' with the respected parameter.\r\n * Also allows for passing an array in order to use '{n}' notation.\r\n * Not limited to an array's indexes.  For example, {length} is allowed.\r\n * Based upon Crockford's supplant function.\r\n * @param source\r\n * @param params\r\n * @returns {string}\r\n */\r\nexport function supplant(source:string, params:{[key:string]:any}|any[]):string\r\n{\r\n\tconst oIsArray = (params)instanceof(Array);\r\n\treturn source.replace(/{([^{}]*)}/g,\r\n\t\t(a:string, b:string):any=>\r\n\t\t{\r\n\t\t\tlet n:any = b;\r\n\t\t\tif(oIsArray)\r\n\t\t\t{\r\n\t\t\t\tlet i = parseInt(b);\r\n\t\t\t\tif(!isNaN(i)) n = i;\r\n\t\t\t}\r\n\r\n\t\t\tlet r = (<any>params)[n];\r\n\t\t\tswitch(typeof r)\r\n\t\t\t{\r\n\t\t\t\tcase Type.STRING:\r\n\t\t\t\tcase Type.NUMBER:\r\n\t\t\t\tcase Type.BOOLEAN:\r\n\t\t\t\t\treturn r;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn (r && Type.hasMemberOfType(r, \"toString\", Type.FUNCTION))\r\n\t\t\t\t\t\t? r.toString()\r\n\t\t\t\t\t\t: a;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n}\r\n\r\n\r\nfunction canMatch(source:string, match:string):boolean|null|void\r\n{\r\n\tif(!Type.isString(source) || !match) return false;\r\n\tif(source===match) return true;\r\n\tif(match.length<source.length) return null;\r\n}\r\n\r\n/**\r\n * Returns true if the pattern matches the beginning of the source.\r\n * @param source\r\n * @param pattern\r\n * @returns {boolean}\r\n */\r\nexport function startsWith(source:string, pattern:string):boolean\r\n{\r\n\tconst m = canMatch(source, pattern);\r\n\treturn Type.isBoolean(m) ? m : source.indexOf(pattern)==0;\r\n}\r\n\r\n/**\r\n * Returns true if the pattern matches the end of the source.\r\n * @param source\r\n * @param pattern\r\n * @returns {boolean}\r\n */\r\nexport function endsWith(source:string, pattern:string):boolean\r\n{\r\n\tconst m = canMatch(source, pattern);\r\n\treturn Type.isBoolean(m) ? m : source.lastIndexOf(pattern)==(source.length - pattern.length);\r\n}\r\n\r\n"]}