{"version":3,"sources":["System/Text/RegexMatchEnumerator.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,2DAAkD;AAClD,8EAA2E;AAC3E,4EAAyE;AAGzE;IAIC,8BAAY,OAA2B;QAEtC,IAAG,OAAO,YAAY,0BAAK,EAC3B;YACC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;SACxB;aAED;YACC,IAAI,CAAC,QAAQ,GAAG,IAAI,0BAAK,CAAC,OAAO,CAAC,CAAC;SACnC;IACF,CAAC;IAED,sCAAO,GAAP,UAAQ,KAAY;QAApB,iBAmBC;QAjBA,IAAI,CAAQ,CAAC,CAAC,UAAU;QACxB,OAAO,IAAI,+BAAc,CACxB;YAEC,CAAC,GAAG,CAAC,CAAC;QACP,CAAC,EACD,UAAA,OAAO;YAEN,IAAI,KAAK,GAAS,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChD,IAAG,KAAK,CAAC,OAAO,EAChB;gBACC,CAAC,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC/B,OAAO,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAClC;YAED,OAAO,OAAO,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,4BAAO,GAAd,UAAe,KAAY,EAAE,OAA2B;QAEvD,OAAO,KAAK,IAAI,OAAO;YACtB,CAAC,CAAC,CAAC,IAAI,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;YACpD,CAAC,CAAC,iCAAe,CAAC;IACpB,CAAC;IAEF,2BAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,oDAAoB;AA8CjC,kBAAe,oBAAoB,CAAC,OAAO,CAAC","file":"RegexMatchEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Match, Regex} from \"./RegularExpressions\";\r\nimport {EmptyEnumerator} from \"../Collections/Enumeration/EmptyEnumerator\";\r\nimport {EnumeratorBase} from \"../Collections/Enumeration/EnumeratorBase\";\r\nimport {IEnumerator} from \"../Collections/Enumeration/IEnumerator\";\r\n\r\nexport class RegexMatchEnumerator\r\n{\r\n\tprivate readonly _pattern:Regex;\r\n\r\n\tconstructor(pattern:string|RegExp|Regex)\r\n\t{\r\n\t\tif(pattern instanceof Regex)\r\n\t\t{\r\n\t\t\tthis._pattern = pattern;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._pattern = new Regex(pattern);\r\n\t\t}\r\n\t}\r\n\r\n\tmatches(input:string):IEnumerator<Match>\r\n\t{\r\n\t\tlet p:number; // pointer\r\n\t\treturn new EnumeratorBase<Match>(\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tp = 0;\r\n\t\t\t},\r\n\t\t\tyielder=>\r\n\t\t\t{\r\n\t\t\t\tlet match:Match = this._pattern.match(input, p);\r\n\t\t\t\tif(match.success)\r\n\t\t\t\t{\r\n\t\t\t\t\tp = match.index + match.length;\r\n\t\t\t\t\treturn yielder.yieldReturn(match);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:string|RegExp|Regex):IEnumerator<Match>\r\n\t{\r\n\t\treturn input && pattern\r\n\t\t\t? (new RegexMatchEnumerator(pattern)).matches(input)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n}\r\n\r\nexport default RegexMatchEnumerator.matches;"]}