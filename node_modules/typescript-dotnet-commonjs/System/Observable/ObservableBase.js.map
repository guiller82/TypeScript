{"version":3,"sources":["System/Observable/ObservableBase.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAEH,uDAAoD;AAKpD,yCAA4C;AAC5C,mCAAmC;AACnC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAElC,2FAA2F;AAE3F;IACQ,kCAA8B;IADtC;;IAwDA,CAAC;IApDU,gCAAO,GAAjB,UAAkB,KAAO;QAExB,aAAa,CACZ,IAAI,CAAC,eAAe,EAAE,EACtB,UAAA,CAAC,IAAM,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACrC,CAAC;IACH,CAAC;IAES,iCAAQ,GAAlB,UAAmB,KAAS;QAE3B,aAAa,CACZ,IAAI,CAAC,eAAe,EAAE,EACtB,UAAA,CAAC,IAAM,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACvC,CAAC;IACH,CAAC;IAES,qCAAY,GAAtB;QAEC,aAAa,CACZ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAC1B,UAAA,CAAC,IAAM,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAC1C,CAAC;IACH,CAAC;IAOD,kCAAS,GAAT,UACC,UAAmC,EACnC,OAAoB,EACpB,WAAoB;QAEpB,IAAI,CAAc,CAAC;QACnB,IAAI,IAAI,GAAG,OAAO,UAAU,IAAE,UAAU,CAAC;QACzC,IAAG,OAAO,IAAI,WAAW,IAAI,IAAI,EACjC;YACC,IAAG,UAAU,IAAI,CAAC,IAAI;gBAAE,MAAM,0BAA0B,CAAC;YACzD,CAAC,GAAG;gBACH,MAAM,EAAa,UAAU;gBAC7B,OAAO,EAAE,OAAO;gBAChB,WAAW,EAAE,WAAW;aACxB,CAAA;SACD;aAED;YACC,CAAC,GAAiB,UAAU,CAAC;SAC7B;QAED,OAAO,iBAAM,SAAS,YAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IACF,qBAAC;AAAD,CAxDA,AAwDC,CAvDO,mCAAgB,GAuDvB;AAxDqB,wCAAc;AA0DpC,IAAM,sBAAsB,GAAU,uEAAuE,CAAC;AAE9G,uBACC,SAA6B,EAC7B,OAA8B;IAE9B,IAAG,CAAC,SAAS;QAAE,OAAO;IACtB,IAAI,eAAe,GAAyC,IAAI,CAAC;IAEjE,KAAa,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EACtB;QADI,IAAI,CAAC,kBAAA;QAER,IACA;YACC,OAAO,CAAC,CAAC,CAAC,CAAC;SACX;QACD,OAAM,EAAE,EACR;YACC,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;YACxC,iEAAiE;YACjE,eAAe,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC;SAC5C;KACD;IAED,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAErB,IAAG,eAAe,IAAI,eAAe,CAAC,MAAM,EAC5C;QACC,IAAG,OAAO,IAAI,OAAO,CAAC,KAAK;YAC1B,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;;YACnD,MAAM;gBACV,OAAO,EAAE,sBAAsB;gBAC/B,MAAM,EAAE,eAAe;aACvB,CAAC;KACF;AAEF,CAAC;AAED,kBAAe,cAAc,CAAC","file":"ObservableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * C# Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\nimport {SubscribableBase} from \"./SubscribableBase\";\r\nimport {IObservable} from \"./IObservable\";\r\nimport {IObserver} from \"./IObserver\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {Action, Closure} from \"../FunctionTypes\";\r\nimport __extendsImport from \"../../extends\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\n\r\nexport abstract class ObservableBase<T>\r\nextends SubscribableBase<IObserver<T>> implements IObservable<T>\r\n{\r\n\r\n\tprotected _onNext(value:T):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onNext && s.onNext(value); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onError(error:any):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onError && s.onError(error); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onCompleted():void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._unsubscribeAll(true),\r\n\t\t\ts => { s.onCompleted && s.onCompleted(); }\r\n\t\t);\r\n\t}\r\n\r\n\tsubscribe(subscriber:IObserver<T>):IDisposable\r\n\tsubscribe(\r\n\t\tsubscriber:Action<T>,\r\n\t\tonError?:Action<any>,\r\n\t\tonCompleted?:Closure):IDisposable\r\n\tsubscribe(\r\n\t\tsubscriber:IObserver<T> | Action<T>,\r\n\t\tonError?:Action<any>,\r\n\t\tonCompleted?:Closure):IDisposable\r\n\t{\r\n\t\tlet s:IObserver<T>;\r\n\t\tlet isFn = typeof subscriber=='function';\r\n\t\tif(onError || onCompleted || isFn)\r\n\t\t{\r\n\t\t\tif(subscriber && !isFn) throw \"Invalid subscriber type.\";\r\n\t\t\ts = {\r\n\t\t\t\tonNext: <Action<T>>subscriber,\r\n\t\t\t\tonError: onError,\r\n\t\t\t\tonCompleted: onCompleted\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ts = <IObserver<T>>subscriber;\r\n\t\t}\r\n\r\n\t\treturn super.subscribe(s);\r\n\t}\r\n}\r\n\r\nconst OBSERVER_ERROR_MESSAGE:string = 'One or more observers had errors when attempting to pass information.';\r\n\r\nfunction processAction<T>(\r\n\tobservers:IObserver<T>[]|null,\r\n\thandler:(s:IObserver<T>)=>void)\r\n{\r\n\tif(!observers) return;\r\n\tlet observersErrors:{observer:IObserver<T>,ex:any}[]|null = null;\r\n\r\n\tfor(let s of observers)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\thandler(s);\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tobserversErrors = observersErrors || [];\r\n\t\t\t// Don't let one error prevent others from recieving information.\r\n\t\t\tobserversErrors.push({observer: s, ex: ex});\r\n\t\t}\r\n\t}\r\n\r\n\tobservers.length = 0;\r\n\r\n\tif(observersErrors && observersErrors.length)\r\n\t{\r\n\t\tif(console && console.error)\r\n\t\t\tconsole.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n\t\telse throw {\r\n\t\t\tmessage: OBSERVER_ERROR_MESSAGE,\r\n\t\t\terrors: observersErrors\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nexport default ObservableBase;"]}