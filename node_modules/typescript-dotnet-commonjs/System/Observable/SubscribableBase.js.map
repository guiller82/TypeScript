{"version":3,"sources":["System/Observable/SubscribableBase.ts"],"names":[],"mappings":"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","file":"SubscribableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {dispose} from \"../Disposable/dispose\";\r\nimport {Subscription} from \"./Subscription\";\r\nimport {ILinkedNodeWithValue} from \"../Collections/ILinkedListNode\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"SubscribableBase\";\r\n// This class is very much akin to a registry or 'Set' but uses an intermediary (Subscription) for releasing the registration.\r\nexport class SubscribableBase<TSubscriber>\r\nextends DisposableBase\r\n{\r\n\r\n\t// Use a linked list since it's much easier to remove a subscriber from anywhere in the list.\r\n\tprivate __subscriptions:LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>> | undefined;\r\n\r\n\tprotected _getSubscribers():TSubscriber[]|null\r\n\t{\r\n\t\tconst s = this.__subscriptions;\r\n\t\treturn s\r\n\t\t\t? s.map(node=><TSubscriber>(node && node.value && node.value.subscriber))\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(NAME);\r\n\t}\r\n\r\n\tprivate _findEntryNode(\r\n\t\tsubscriber:TSubscriber):ILinkedNodeWithValue<Subscription<TSubscriber>>|null\r\n\t{\r\n\t\tconst s = this.__subscriptions || null;\r\n\t\treturn s && s.find(n=>!!n.value && n.value.subscriber===subscriber);\r\n\t}\r\n\r\n\t// It is possible that the same observer could call subscribe more than once and therefore we need to retain a single instance of the subscriber.\r\n\tsubscribe(subscriber:TSubscriber):IDisposable\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst n = _._findEntryNode(subscriber);\r\n\t\tif(n) // Ensure only one instance of the existing subscription exists.\r\n\t\t\treturn <IDisposable>n.value;\r\n\r\n\t\tlet _s = _.__subscriptions;\r\n\t\tif(!_s) _.__subscriptions = _s\r\n\t\t\t= new LinkedNodeList<ILinkedNodeWithValue<Subscription<TSubscriber>>>();\r\n\r\n\t\tconst s = new Subscription(_, subscriber);\r\n\t\t_s.addNode({value: s});\r\n\r\n\t\treturn s;\r\n\t}\r\n\r\n\tunsubscribe(subscriber:TSubscriber):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t// _.throwIfDisposed(); If it was disposed, then it's still safe to try and unsubscribe.\r\n\t\tconst n = _._findEntryNode(subscriber);\r\n\t\tif(n)\r\n\t\t{\r\n\t\t\tconst v = n.value;\r\n\t\t\tconst _s = _.__subscriptions;\r\n\t\t\tif(_s) _s.removeNode(n);\r\n\t\t\tif(v) v.dispose(); // Prevent further usage of a dead subscription.\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _unsubscribeAll():null\r\n\tprotected _unsubscribeAll(returnSubscribers:false):null\r\n\tprotected _unsubscribeAll(returnSubscribers:true):TSubscriber[]|null\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean):TSubscriber[]|null\r\n\tprotected _unsubscribeAll(returnSubscribers:boolean = false):TSubscriber[]|null\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet _s = _.__subscriptions;\r\n\t\tif(!_s) return null;\r\n\t\tconst s = _s.map(n => n.value);\r\n\t\tconst u = returnSubscribers ? s.map(o => o!.subscriber) : null;\r\n\t\t_s.clear(); // Reset...\r\n\r\n\t\tdispose.these.noCopy(s);\r\n\r\n\t\treturn u;\r\n\t}\r\n\r\n\tunsubscribeAll():void\r\n\t{\r\n\t\tthis._unsubscribeAll();\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._unsubscribeAll();\r\n\t\tconst s = this.__subscriptions;\r\n\t\tthis.__subscriptions = <any>null;\r\n\t\tif(s) s.dispose();\r\n\t}\r\n\r\n}\r\n\r\nexport default SubscribableBase;\r\n"]}