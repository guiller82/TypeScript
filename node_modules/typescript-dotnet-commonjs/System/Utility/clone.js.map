{"version":3,"sources":["System/Utility/clone.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,kCAA8B;AAG9B,kDAA+C;AAE/C,eAA8B,MAAsC,EAAE,KAAgB;IAAhB,sBAAA,EAAA,SAAgB;IAErF,IAAG,KAAK,GAAC,CAAC;QACT,OAAO,MAAM,CAAC;IAEf,2BAA2B;IAC3B,IAAG,CAAC,YAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QACxB,OAAO,MAAM,CAAC;IAEf,IAAG,YAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAC3B;QACC,gEAAgE;QAChE,IAAM,MAAM,GAAG,WAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAG,KAAK,GAAC,CAAC,EACV;YACC,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;YAC1B,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EACzB;gBACC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aACxC;SACD;QACD,OAAO,MAAM,CAAC;KACd;SAED;QACC,IAAM,MAAM,GAAO,EAAE,CAAC;QACtB,IAAG,KAAK,GAAC,CAAC;YAAE,KAAI,IAAI,CAAC,IAAS,MAAM,EACpC;gBACC,oCAAoC;gBACpC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAO,MAAO,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aAC/C;QACD,OAAO,MAAM,CAAC;KACd;AAGF,CAAC;AAnCD,wBAmCC","file":"clone.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {JsonArray, JsonMap} from \"../../JSON\";\r\nimport {copy} from \"../Collections/Array/copy\";\r\n\r\nexport default function clone(source:Primitive | JsonMap | JsonArray, depth:number = 0):any\r\n{\r\n\tif(depth<0)\r\n\t\treturn source;\r\n\r\n\t// return primitives as is.\r\n\tif(!Type.isObject(source))\r\n\t\treturn source;\r\n\r\n\tif(Type.isArrayLike(source))\r\n\t{\r\n\t\t// Make a copy first just in case there's some weird references.\r\n\t\tconst result = copy(source);\r\n\t\tif(depth>0)\r\n\t\t{\r\n\t\t\tconst len = source.length;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = clone(result[i], depth - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tconst result:any = {};\r\n\t\tif(depth>0) for(let k in <any>source)\r\n\t\t{\r\n\t\t\t//noinspection JSUnfilteredForInLoop\r\n\t\t\tresult[k] = clone((<any>source)[k], depth - 1);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n}\r\n"]}