{"version":3,"sources":["System.Linq/Linq.ts"],"names":[],"mappings":"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","file":"Linq.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual as areEqualValues, compare as compareValues} from \"../System/Compare\";\r\nimport {copy} from \"../System/Collections/Array/copy\";\r\nimport * as Arrays from \"../System/Collections/Array/Compare\";\r\nimport * as enumUtil from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {\r\n\tisEnumerable,\r\n\tisEnumerator,\r\n\tisIterator,\r\n\tthrowIfEndless\r\n} from \"../System/Collections/Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"../System/Collections/Enumeration/EmptyEnumerator\";\r\nimport {Type} from \"../System/Types\";\r\nimport {Integer} from \"../System/Integer\";\r\nimport {Functions as BaseFunctions} from \"../System/Functions\";\r\nimport {ArrayEnumerator} from \"../System/Collections/Enumeration/ArrayEnumerator\";\r\nimport {EnumeratorBase} from \"../System/Collections/Enumeration/EnumeratorBase\";\r\nimport {Dictionary} from \"../System/Collections/Dictionaries/Dictionary\";\r\nimport {Queue} from \"../System/Collections/Queue\";\r\nimport {dispose, using} from \"../System/Disposable/dispose\";\r\nimport {DisposableBase} from \"../System/Disposable/DisposableBase\";\r\nimport {UnsupportedEnumerableException} from \"../System/Collections/Enumeration/UnsupportedEnumerableException\";\r\nimport {ObjectDisposedException} from \"../System/Disposable/ObjectDisposedException\";\r\nimport {KeySortedContext} from \"../System/Collections/Sorting/KeySortedContext\";\r\nimport {ArgumentNullException} from \"../System/Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../System/Exceptions/ArgumentOutOfRangeException\";\r\nimport {IEnumerator} from \"../System/Collections/Enumeration/IEnumerator\";\r\nimport {IEnumerable} from \"../System/Collections/Enumeration/IEnumerable\";\r\nimport {\r\n\tAction,\r\n\tActionWithIndex,\r\n\tClosure,\r\n\tComparison,\r\n\tEqualityComparison,\r\n\tHashSelector,\r\n\tPredicateWithIndex,\r\n\tSelector,\r\n\tSelectorWithIndex\r\n} from \"../System/FunctionTypes\";\r\nimport {IDictionary, IMap} from \"../System/Collections/Dictionaries/IDictionary\";\r\nimport {Comparable} from \"../System/IComparable\";\r\nimport {IComparer} from \"../System/IComparer\";\r\nimport {IKeyValuePair} from \"../System/KeyValuePair\";\r\nimport {Order} from \"../System/Collections/Sorting/Order\";\r\nimport {EnumerableAction} from \"./EnumerableAction\";\r\nimport {IndexEnumerator} from \"../System/Collections/Enumeration/IndexEnumerator\";\r\nimport {Primitive} from \"../System/Primitive\";\r\nimport {IteratorEnumerator} from \"../System/Collections/Enumeration/IteratorEnumerator\";\r\nimport {ForEachEnumerable} from \"../System/Collections/Enumeration/ForEachEnumerable\";\r\nimport {initialize} from \"../System/Collections/Array/initialize\";\r\nimport {Random} from \"../System/Random\";\r\nimport {\r\n\tInfiniteEnumerator,\r\n\tInfiniteValueFactory\r\n} from \"../System/Collections/Enumeration/InfiniteEnumerator\";\r\nimport __extendsImport from \"../extends\";\r\nimport {LazyList} from \"../System/Collections/LazyList\";\r\nimport disposeSingle = dispose.single;\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// #region Local Constants.\r\n\r\nconst INVALID_DEFAULT:any = {}; // create a private unique instance for referencing.\r\nconst VOID0:undefined = void 0;\r\nconst NULL:any = null;\r\nfunction BREAK():EnumerableAction\r\n{\r\n\treturn EnumerableAction.Break;\r\n}\r\nfunction RETURN():EnumerableAction\r\n{\r\n\treturn EnumerableAction.Return;\r\n}\r\nfunction isNotNullOrUndefined(e:any):boolean\r\n{\r\n\treturn e!=null;\r\n}\r\n\r\n\r\n// Leave internal to avoid accidental overwriting.\r\nclass LinqFunctions\r\n\textends BaseFunctions\r\n{\r\n\t// noinspection JSMethodCanBeStatic\r\n\tGreater<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a>b ? a : b;\r\n\t}\r\n\r\n\r\n\t// noinspection JSMethodCanBeStatic\r\n\tLesser<T>(a:T, b:T)\r\n\t{\r\n\t\treturn a<b ? a : b;\r\n\t}\r\n}\r\n\r\nconst Functions = Object.freeze(new LinqFunctions());\r\n\r\n// For re-use as a factory.\r\nfunction getEmptyEnumerator():IEnumerator<any>\r\n{\r\n\treturn EmptyEnumerator;\r\n}\r\n\r\n// #endregion\r\n\r\n\r\n/*\r\n * NOTE: About InfiniteEnumerable<T> and Enumerable<T>.\r\n * There may seem like there's extra overrides here and they may seem unnecessary.\r\n * But after closer inspection you'll see the type chain is retained and\r\n * infinite enumerables are prevented from having features that finite ones have.\r\n *\r\n * I'm not sure if it's the best option to just use overrides, but it honors the typing properly.\r\n */\r\n\r\nexport class InfiniteLinqEnumerable<T>\r\n\textends DisposableBase\r\n{\r\n\tconstructor(\r\n\t\tprotected _enumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure | null)\r\n\t{\r\n\t\tsuper(\"InfiniteLinqEnumerable\", finalizer);\r\n\t\tthis._isEndless = true;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean | undefined;\r\n\tget isEndless():boolean | undefined\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t// #region IEnumerable<T> Implementation...\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn this._enumeratorFactory();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IDisposable override...\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose(); // Just in case.\r\n\t\t(<any>this)._enumeratorFactory = null;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new InfiniteLinqEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n\t/**\r\n\t * Similar to forEach, but executes an action for each time a value is enumerated.\r\n\t * If the action explicitly returns false or 0 (EnumerationAction.Break), the enumeration will complete.\r\n\t * If it returns a 2 (EnumerationAction.Skip) it will move on to the next item.\r\n\t * This also automatically handles disposing the enumerator.\r\n\t * @param action\r\n\t * @param initializer\r\n\t * @param isEndless Special case where isEndless can be null in order to negate inheritance.\r\n\t * @param onComplete Executes just before the enumerator releases when there is no more entries.\r\n\t * @returns {any}\r\n\t */\r\n\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer:Closure | null,\r\n\t\tisEndless:true,\r\n\t\tonComplete?:Action<number>):InfiniteLinqEnumerable<T>\r\n\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer?:Closure | null,\r\n\t\tisEndless?:boolean | null | undefined,\r\n\t\tonComplete?:Action<number>):LinqEnumerable<T>\r\n\r\n\tdoAction(\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T> | SelectorWithIndex<T, number> | SelectorWithIndex<T, EnumerableAction>,\r\n\t\tinitializer?:Closure | null,\r\n\t\tisEndless:boolean | null | undefined = this.isEndless,\r\n\t\tonComplete?:Action<number>):LinqEnumerable<T>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst isE:boolean | undefined = isEndless || undefined; // In case it's null.\r\n\t\tif(!action)\r\n\t\t\tthrow new ArgumentNullException(\"action\");\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!action);\r\n\r\n\t\t\t\t\t\tif(initializer) initializer();\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t// May need a way to propagate isEndless\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!action);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet c = enumerator.current!;\r\n\t\t\t\t\t\t\tlet actionResult = <any>action(c, index++);\r\n\r\n\t\t\t\t\t\t\tif(actionResult===false || actionResult===EnumerableAction.Break)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tif(actionResult!==EnumerableAction.Skip) // || !== 2\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(c);\r\n\r\n\t\t\t\t\t\t\t// If actionResult===2, then a signal for skip is received.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(onComplete) onComplete(index);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisE\r\n\t\t\t\t);\r\n\r\n\t\t\t},\r\n\t\t\t// Using a finalizer value reduces the chance of a circular reference\r\n\t\t\t// since we could simply reference the enumeration and check e.wasDisposed.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\taction = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tisE\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforce():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.doAction(BREAK)\r\n\t\t\t.getEnumerator()\r\n\t\t\t.moveNext();\r\n\r\n\t}\r\n\r\n\t// #region Indexing/Paging methods.\r\n\tskip(count:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> new InfiniteLinqEnumerable<T>(getEmptyEnumerator);\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn this.where((element, index) => index>=count);\r\n\t}\r\n\r\n\r\n\ttake(count:number):FiniteEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\tthrow new ArgumentOutOfRangeException('count', count, 'Must be finite.');\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// Once action returns false, the enumeration will stop.\r\n\t\treturn <any> _.doAction((element, index) => index<count, null, false);\r\n\t}\r\n\r\n\t// #region Single Value Return...\r\n\r\n\telementAt(index:number):T\r\n\t{\r\n\t\tconst v = this.elementAtOrDefault(index, INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new ArgumentOutOfRangeException('index', index, \"is greater than or equal to the number of elements in source\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\telementAtOrDefault(index:number):T | undefined\r\n\telementAtOrDefault(index:number, defaultValue:T):T\r\n\telementAtOrDefault(index:number, defaultValue?:T):T | undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tconst n:number = index;\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te =>\r\n\t\t\t{\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\twhile(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i==n) return e.current;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/* Note: Unlike previous implementations, you could pass a predicate into these methods.\r\n\t * But since under the hood it ends up calling .where(predicate) anyway,\r\n\t * it may be better to remove this to allow for a cleaner signature/override.\r\n\t * JavaScript/TypeScript does not easily allow for a strict method interface like C#.\r\n\t * Having to write extra override logic is error prone and confusing to the consumer.\r\n\t * Removing the predicate here may also cause the consumer of this method to think more about how they structure their query.\r\n\t * The end all difference is that the user must declare .where(predicate) before .first(), .single(), or .last().\r\n\t * Otherwise there would need to be much more code to handle these cases (.first(predicate), etc);\r\n\t * */\r\n\r\n\tfirst():T\r\n\t{\r\n\t\tconst v = this.firstOrDefault(INVALID_DEFAULT);\r\n\t\tif(v===INVALID_DEFAULT) throw new Error(\"first:The sequence is empty.\");\r\n\t\treturn <T>v;\r\n\t}\r\n\r\n\tfirstOrDefault():T | undefined\r\n\tfirstOrDefault(defaultValue:T):T\r\n\tfirstOrDefault(defaultValue?:T):T | undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te => e.moveNext() ? e.current : defaultValue\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tsingle():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <T>using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te =>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t\tthrow new Error(\"single:sequence contains more than one element.\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error(\"single:The sequence is empty.\");\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsingleOrDefault():T | undefined\r\n\tsingleOrDefault(defaultValue:T):T\r\n\tsingleOrDefault(defaultValue?:T):T | undefined\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te =>\r\n\t\t\t{\r\n\t\t\t\tif(e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tlet value = e.current;\r\n\t\t\t\t\tif(!e.moveNext()) return value;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tany():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te => e.moveNext()\r\n\t\t);\r\n\t}\r\n\r\n\tisEmpty():boolean\r\n\t{\r\n\t\treturn !this.any();\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\t// #region Projection and Filtering Methods\r\n\r\n\r\n\ttraverseDepthFirst(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined):LinqEnumerable<T>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T | TNode) => ForEachEnumerable<TNode> | null | undefined):LinqEnumerable<TNode>;\r\n\r\n\ttraverseDepthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T | TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>;\r\n\r\n\ttraverseDepthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T | TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel:number) => any = <any>Functions.Identity):LinqEnumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\t\treturn new LinqEnumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t// Dev Note: May want to consider using an actual stack and not an array.\r\n\t\t\t\tlet enumeratorStack:IEnumerator<any>[];\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet len:number;  // Avoid using push/pop since they query .length every time and can be slower.\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tenumeratorStack = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet value = resultSelector(<TNode>enumerator.current, len);\r\n\t\t\t\t\t\t\t\tenumeratorStack[len++] = enumerator;\r\n\t\t\t\t\t\t\t\tlet c = childrenSelector(<T | TNode>enumerator.current);\r\n\t\t\t\t\t\t\t\tlet e = !Type.isString(c) && Enumerable.fromAny(c);\r\n\t\t\t\t\t\t\t\tenumerator = e ? e.getEnumerator() : EmptyEnumerator;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(len==0) return false;\r\n\r\n\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = enumeratorStack[--len];\r\n\t\t\t\t\t\t\tenumeratorStack.length = len;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumeratorStack)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdispose.these.noCopy(enumeratorStack);\r\n\t\t\t\t\t\t\t\tenumeratorStack.length = 0;\r\n\t\t\t\t\t\t\t\tenumeratorStack = NULL;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tflatten<TFlat>():InfiniteLinqEnumerable<TFlat>\r\n\tflatten():InfiniteLinqEnumerable<any>\r\n\tflatten():InfiniteLinqEnumerable<any>\r\n\t{\r\n\t\treturn this.selectMany(entry =>\r\n\t\t{\r\n\t\t\tlet e = !Type.isString(entry) && Enumerable.fromAny(entry);\r\n\t\t\treturn e ? e.flatten() : [entry];\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tpairwise<TSelect>(\r\n\t\tselector:(\r\n\t\t\tprevious:T, current:T,\r\n\t\t\tindex:number) => TSelect):InfiniteLinqEnumerable<TSelect>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!selector)\r\n\t\t\tthrow new ArgumentNullException(\"selector\");\r\n\r\n\t\tlet previous:T;\r\n\t\treturn this.select<TSelect>((value, i) =>\r\n\t\t{\r\n\t\t\tconst result:any = i ? selector(previous!, value, i) : NULL;\r\n\t\t\tprevious = value;\r\n\t\t\treturn result;\r\n\t\t}).skip(1);\r\n\t}\r\n\r\n\tscan(func:(previous:T, current:T, index:number) => T, seed?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!func)\r\n\t\t\tthrow new ArgumentNullException(\"func\");\r\n\r\n\t\treturn <this>(\r\n\t\t\tseed===VOID0\r\n\t\t\t\t? this.select((value, i) => seed = i ? func(seed!, value, i) : value)\r\n\t\t\t\t: this.select((value, i) => seed = func(seed!, value, i))\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tselect<TResult>(selector:SelectorWithIndex<T, TResult>):InfiniteLinqEnumerable<TResult>\r\n\t{\r\n\t\treturn this._filterSelected(selector);\r\n\t}\r\n\r\n\tmap<TResult>(selector:SelectorWithIndex<T, TResult>):InfiniteLinqEnumerable<TResult>\r\n\t{\r\n\t\treturn this._filterSelected(selector);\r\n\t}\r\n\r\n\t/*\r\n\tpublic static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(\r\n\t\tthis IEnumerable<TSource> source,\r\n\t\tFunc<TSource, IEnumerable<TCollection>> collectionSelector,\r\n\t\tFunc<TSource, TCollection, TResult> resultSelector)\r\n\t */\r\n\r\n\tprotected _selectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TElement> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:TElement) => TResult):LinqEnumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!collectionSelector)\r\n\t\t\tthrow new ArgumentNullException(\"collectionSelector\");\r\n\r\n\t\tconst isEndless = _._isEndless; // Do second enumeration, it will be indeterminate if false.\r\n\t\tif(!resultSelector)\r\n\t\t\tresultSelector = (a:T, b:any) => <TResult>b;\r\n\r\n\t\treturn new LinqEnumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet middleEnumerator:IEnumerator<any> | null | undefined;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!collectionSelector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tmiddleEnumerator = VOID0;\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!collectionSelector);\r\n\t\t\t\t\t\t// Just started, and nothing to enumerate? End.\r\n\t\t\t\t\t\tif(middleEnumerator===VOID0 && !enumerator.moveNext())\r\n\t\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t\t// moveNext has been called at least once...\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\t// Initialize middle if there isn't one.\r\n\t\t\t\t\t\t\tif(!middleEnumerator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet middleSeq = collectionSelector(<T>enumerator.current, index++);\r\n\r\n\t\t\t\t\t\t\t\t// Collection is null?  Skip it...\r\n\t\t\t\t\t\t\t\tif(!middleSeq)\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\t\tmiddleEnumerator = enumUtil.from(middleSeq);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(middleEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\tresultSelector!(\r\n\t\t\t\t\t\t\t\t\t\t<T>enumerator.current, <TElement>middleEnumerator.current\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// else no more in this middle?  Then clear and reset for next...\r\n\r\n\t\t\t\t\t\t\tmiddleEnumerator.dispose();\r\n\t\t\t\t\t\t\tmiddleEnumerator = null;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(enumerator.moveNext());\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tdisposeSingle(middleEnumerator);\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tmiddleEnumerator = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tcollectionSelector = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TResult> | null | undefined>):InfiniteLinqEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TElement> | null | undefined>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):InfiniteLinqEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<any> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):InfiniteLinqEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tprotected _filterSelected(\r\n\t\tselector?:SelectorWithIndex<T, T>,\r\n\t\tfilter?:PredicateWithIndex<T>):LinqEnumerable<T>\r\n\tprotected _filterSelected<TResult>(\r\n\t\tselector:SelectorWithIndex<T, TResult>,\r\n\t\tfilter?:PredicateWithIndex<TResult>):LinqEnumerable<TResult>\r\n\tprotected _filterSelected(\r\n\t\tselector:SelectorWithIndex<T, any> = <any>Functions.Identity,\r\n\t\tfilter?:PredicateWithIndex<any>):LinqEnumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tif(!selector)\r\n\t\t\tthrow new ArgumentNullException(\"selector\");\r\n\r\n\t\treturn new LinqEnumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!selector);\r\n\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet i = index++;\r\n\t\t\t\t\t\t\tlet result = selector(enumerator.current!, i);\r\n\t\t\t\t\t\t\tif(!filter || filter(result, i++))\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_._isEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = false;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns selected values that are not null or undefined.\r\n\t */\r\n\tchoose():InfiniteLinqEnumerable<T>;\r\n\tchoose<TResult>(selector?:Selector<T, TResult>):InfiniteLinqEnumerable<TResult>\r\n\tchoose(selector:Selector<T, any> = Functions.Identity):InfiniteLinqEnumerable<any>\r\n\t{\r\n\t\treturn this._filterSelected(selector, isNotNullOrUndefined);\r\n\t}\r\n\r\n\twhere(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\treturn <any>this._filterSelected(Functions.Identity, predicate);\r\n\t}\r\n\r\n\tfilter(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\treturn <any>this._filterSelected(Functions.Identity, predicate);\r\n\t}\r\n\r\n\tnonNull():this\r\n\t{\r\n\t\treturn this.where(v => v!=null && v!=VOID0);\r\n\t}\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):InfiniteLinqEnumerable<TType>;\r\n\tofType<TType>(type:any):InfiniteLinqEnumerable<TType>\r\n\t{\r\n\t\tlet typeName:string;\r\n\t\tswitch(<any>type)\r\n\t\t{\r\n\t\t\tcase Number:\r\n\t\t\t\ttypeName = Type.NUMBER;\r\n\t\t\t\tbreak;\r\n\t\t\tcase String:\r\n\t\t\t\ttypeName = Type.STRING;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Boolean:\r\n\t\t\t\ttypeName = Type.BOOLEAN;\r\n\t\t\t\tbreak;\r\n\t\t\tcase Function:\r\n\t\t\t\ttypeName = Type.FUNCTION;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn <any> this\r\n\t\t\t\t\t.where(x => x instanceof type);\r\n\t\t}\r\n\t\treturn <any>this\r\n\t\t\t.where(x => isNotNullOrUndefined(x) && typeof x===typeName);\r\n\t}\r\n\r\n\texcept(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tcompareSelector?:HashSelector<T>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\tif(second)\r\n\t\t\t\t\t\t\tenumUtil.forEach(second, key => { keys.addByKeyValue(key, true) });\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tkeys.clear();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tdistinct(compareSelector?:HashSelector<T>):this\r\n\t{\r\n\t\treturn this.except(NULL, compareSelector);\r\n\t}\r\n\r\n\t// [0,0,0,1,1,1,2,2,2,0,0,0,1,1] results in [0,1,2,0,1];\r\n\tdistinctUntilChanged(compareSelector:HashSelector<T> = <any>Functions.Identity):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet compareKey:any;\r\n\t\t\t\tlet initial:boolean = true;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet key = compareSelector(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(initial)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinitial = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(areEqualValues(compareKey, key))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcompareKey = key;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a single default value if empty.\r\n\t * @param defaultValue\r\n\t * @returns {Enumerable}\r\n\t */\r\n\tdefaultIfEmpty(defaultValue?:T):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst disposed:boolean = !_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet isFirst:boolean;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisFirst = true;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(isFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzip<TSecond, TResult>(\r\n\t\tsecond:ForEachEnumerable<TSecond>,\r\n\t\tresultSelector:(first:T, second:TSecond, index:number) => TResult):LinqEnumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\r\n\t\treturn new LinqEnumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumUtil.from<TSecond>(second);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) => firstEnumerator.moveNext()\r\n\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(resultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator) firstEnumerator.dispose();\r\n\t\t\t\t\t\tif(secondEnumerator) secondEnumerator.dispose();\r\n\t\t\t\t\t\tfirstEnumerator = NULL;\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tzipMultiple<TSecond, TResult>(\r\n\t\tsecond:ArrayLike<ForEachEnumerable<TSecond>>,\r\n\t\tresultSelector:(first:T, second:TSecond, index:number) => TResult):LinqEnumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second.length)\r\n\t\t\treturn Enumerable.empty<TResult>();\r\n\r\n\t\treturn new LinqEnumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet secondTemp:Queue<any>;\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<TSecond>;\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondTemp = new Queue<any>(second);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\twhile(!secondEnumerator)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(secondTemp.count)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tlet next = secondTemp.dequeue();\r\n\t\t\t\t\t\t\t\t\t\tif(next) // In case by chance next is null, then try again.\r\n\t\t\t\t\t\t\t\t\t\t\tsecondEnumerator = enumUtil.from<TSecond>(next);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(\r\n\t\t\t\t\t\t\t\t\t\tresultSelector(<T>firstEnumerator.current, <TSecond>secondEnumerator.current, index++)\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tsecondEnumerator.dispose();\r\n\t\t\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator) firstEnumerator.dispose();\r\n\t\t\t\t\t\tif(secondEnumerator) secondEnumerator.dispose();\r\n\t\t\t\t\t\tif(secondTemp) secondTemp.dispose();\r\n\t\t\t\t\t\tfirstEnumerator = NULL;\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t\tsecondTemp = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\t// #region Join Methods\r\n\r\n\tjoin<TInner, TKey, TResult>(\r\n\t\tinner:ForEachEnumerable<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner) => TResult,\r\n\t\tcompareSelector:HashSelector<TKey> = <any>Functions.Identity):LinqEnumerable<TResult>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\treturn new LinqEnumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet outerEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:Lookup<TKey, TInner>;\r\n\t\t\t\tlet innerElements:TInner[] | null;\r\n\t\t\t\tlet innerCount:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\touterEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(innerElements)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet innerElement = innerElements[innerCount++];\r\n\t\t\t\t\t\t\t\tif(innerElement!==VOID0)\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(<T>outerEnumerator.current, innerElement));\r\n\r\n\t\t\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\t\t\tinnerCount = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(outerEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet key = outerKeySelector(<T>outerEnumerator.current);\r\n\t\t\t\t\t\t\t\tinnerElements = lookup.get(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(outerEnumerator) outerEnumerator.dispose();\r\n\t\t\t\t\t\tinnerElements = null;\r\n\t\t\t\t\t\touterEnumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgroupJoin<TInner, TKey, TResult>(\r\n\t\tinner:ForEachEnumerable<TInner>,\r\n\t\touterKeySelector:Selector<T, TKey>,\r\n\t\tinnerKeySelector:Selector<TInner, TKey>,\r\n\t\tresultSelector:(outer:T, inner:TInner[] | null) => TResult,\r\n\t\tcompareSelector:HashSelector<TKey> = <any>Functions.Identity):LinqEnumerable<TResult>\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\treturn new LinqEnumerable<TResult>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet lookup:Lookup<TKey, TInner>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<TResult>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tlookup = Enumerable.from(inner)\r\n\t\t\t\t\t\t\t.toLookup(innerKeySelector, Functions.Identity, compareSelector);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\tenumerator.moveNext()\r\n\t\t\t\t\t&& yielder.yieldReturn(\r\n\t\t\t\t\t\tresultSelector(\r\n\t\t\t\t\t\t\t<T>enumerator.current,\r\n\t\t\t\t\t\t\tlookup.get(outerKeySelector(<T>enumerator.current))\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tlookup = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmerge(enumerables:ArrayLike<ForEachEnumerable<T>>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\tif(!enumerables || enumerables.length==0)\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet queue:Queue<ForEachEnumerable<T>>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 1) First get our values...\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tqueue = new Queue<ForEachEnumerable<T>>(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\twhile(!enumerator && queue.tryDequeue(value =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator = enumUtil.from<T>(value); // 4) Keep going and on to step 2.  Else fall through to yieldBreak().\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t{ }\r\n\r\n\t\t\t\t\t\t\tif(enumerator && enumerator.moveNext()) // 2) Keep returning until done.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\r\n\t\t\t\t\t\t\tif(enumerator) // 3) Dispose and reset for next.\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tif(queue) queue.dispose();\r\n\t\t\t\t\t\tqueue = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tconcat(...enumerables:Array<ForEachEnumerable<T>>):this\r\n\t{\r\n\t\treturn this.merge(enumerables);\r\n\t}\r\n\r\n\r\n\tunion(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tcompareSelector:HashSelector<T> = <any>Functions.Identity):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, any>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tkeys = new Dictionary<T, any>(compareSelector); // Acting as a HashSet.\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:T;\r\n\t\t\t\t\t\tif(secondEnumerator===VOID0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrent = <T>firstEnumerator.current;\r\n\t\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsecondEnumerator = enumUtil.from(second);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcurrent = <T>secondEnumerator.current;\r\n\t\t\t\t\t\t\tif(!keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeys.addByKeyValue(current, null);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator) firstEnumerator.dispose();\r\n\t\t\t\t\t\tif(secondEnumerator) secondEnumerator.dispose();\r\n\t\t\t\t\t\tfirstEnumerator = NULL;\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tinsertAt(index:number, other:ForEachEnumerable<T>):this\r\n\t{\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\t\tconst n:number = index;\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\r\n\t\t\t\tlet firstEnumerator:IEnumerator<T>;\r\n\t\t\t\tlet secondEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\tlet count:number = 0;\r\n\t\t\t\tlet isEnumerated:boolean = false;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\tfirstEnumerator = _.getEnumerator();\r\n\t\t\t\t\t\tsecondEnumerator = enumUtil.from<T>(other);\r\n\t\t\t\t\t\tisEnumerated = false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(count==n)\r\n\t\t\t\t\t\t{ // Inserting?\r\n\t\t\t\t\t\t\tisEnumerated = true;\r\n\t\t\t\t\t\t\tif(secondEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(firstEnumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(firstEnumerator.current);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn !isEnumerated\r\n\t\t\t\t\t\t\t&& secondEnumerator.moveNext()\r\n\t\t\t\t\t\t\t&& yielder.yieldReturn(secondEnumerator.current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(firstEnumerator) firstEnumerator.dispose();\r\n\t\t\t\t\t\tfirstEnumerator = NULL;\r\n\t\t\t\t\t\tif(secondEnumerator) secondEnumerator.dispose();\r\n\t\t\t\t\t\tsecondEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\talternateMultiple(sequence:ForEachEnumerable<T>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T,\r\n\t\t\t\t    mode:EnumerableAction,\r\n\t\t\t\t    enumerator:IEnumerator<T>,\r\n\t\t\t\t    alternateEnumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Instead of recalling getEnumerator every time, just reset the existing one.\r\n\t\t\t\t\t\talternateEnumerator = new ArrayEnumerator(\r\n\t\t\t\t\t\t\tEnumerable.toArray<T>(sequence)\r\n\t\t\t\t\t\t); // Freeze\r\n\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tlet hasAtLeastOne = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = hasAtLeastOne\r\n\t\t\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(hasAtLeastOne)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(mode)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase EnumerableAction.Break: // We're done?\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tcase EnumerableAction.Skip:\r\n\t\t\t\t\t\t\t\tif(alternateEnumerator.moveNext())\r\n\t\t\t\t\t\t\t\t\treturn yielder.yieldReturn(alternateEnumerator.current);\r\n\t\t\t\t\t\t\t\talternateEnumerator.reset();\r\n\t\t\t\t\t\t\t\tmode = EnumerableAction.Return;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet latest = buffer;\r\n\r\n\t\t\t\t\t\t// Set up the next round...\r\n\r\n\t\t\t\t\t\t// Is there another one?  Set the buffer and setup instruct for the next one to be the alternate.\r\n\t\t\t\t\t\tlet another = enumerator.moveNext();\r\n\t\t\t\t\t\tmode = another\r\n\t\t\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t\t\t: EnumerableAction.Break;\r\n\r\n\t\t\t\t\t\tif(another)\r\n\t\t\t\t\t\t\tbuffer = <T>enumerator.current;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(latest);\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tif(alternateEnumerator) alternateEnumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\talternateEnumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\talternateSingle(value:T):this\r\n\t{\r\n\t\treturn this.alternateMultiple(Enumerable.make(value));\r\n\t}\r\n\r\n\talternate(...sequence:T[]):this\r\n\t{\r\n\t\treturn this.alternateMultiple(sequence);\r\n\t}\r\n\r\n\r\n\t// #region Error Handling\r\n\tcatchError(handler:(e:any) => void):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst disposed = !_.throwIfDisposed();\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Don't init...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) try\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(enumerator.current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(e)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thandler(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfinallyAction(action:Closure):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\treturn (enumerator.moveNext())\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(enumerator.current)\r\n\t\t\t\t\t\t\t: false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\taction();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):InfiniteLinqEnumerable<T[]>\r\n\t{\r\n\t\tif(size<1 || !isFinite(size))\r\n\t\t\tthrow new Error(\"Invalid buffer size.\");\r\n\r\n\t\tInteger.assert(size, \"size\");\r\n\r\n\t\tconst _ = this;\r\n\t\tconst isEndless = _._isEndless;\r\n\t\tlet len:number;\r\n\r\n\t\treturn new LinqEnumerable<T[]>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\treturn new EnumeratorBase<T[]>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet array:T[] = initialize<T>(size);\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\twhile(len<size && enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tarray[len++] = <T>enumerator.current;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.length = len;\r\n\t\t\t\t\t\treturn !!len && yielder.yieldReturn(array);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnull,\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tshare():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet sharedEnumerator:IEnumerator<T>;\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn sharedEnumerator || (sharedEnumerator = _.getEnumerator());\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(sharedEnumerator) sharedEnumerator.dispose();\r\n\t\t\t\tsharedEnumerator = NULL;\r\n\t\t\t},\r\n\r\n\t\t\t_._isEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tmemoize():InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\tlet source = new LazyList(this);\r\n\t\treturn <this>(new InfiniteLinqEnumerable<T>(() => source.getEnumerator(), () =>\r\n\t\t{\r\n\t\t\tsource.dispose();\r\n\t\t\tsource = <any>null\r\n\t\t}));\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Enumerable<T> is a wrapper class that allows more primitive enumerables to exhibit LINQ behavior.\r\n *\r\n * In C# Enumerable<T> is not an instance but has extensions for IEnumerable<T>.\r\n * In this case, we use Enumerable<T> as the underlying class that is being chained.\r\n */\r\nexport class LinqEnumerable<T>\r\n\textends InfiniteLinqEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure | null,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer);\r\n\t\tthis._isEndless = isEndless;\r\n\t\t// @ts-ignore\r\n\t\tthis._disposableObjectName = \"LinqEnumerable\";\r\n\t}\r\n\r\n\t// Return a default (unfiltered) enumerable.\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn <any> new LinqEnumerable<T>(() => _.getEnumerator());\r\n\t}\r\n\r\n// #region Indexing/Paging methods.\r\n\r\n\tskipWhile(predicate:PredicateWithIndex<T>):LinqEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Skip\r\n\t\t\t\t\t: EnumerableAction.Return\r\n\t\t);\r\n\t}\r\n\r\n\ttakeWhile(predicate:PredicateWithIndex<T>):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\treturn <any>this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t? EnumerableAction.Return\r\n\t\t\t\t\t: EnumerableAction.Break,\r\n\t\t\tnull,\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Is like the inverse of take While with the ability to return the value identified by the predicate.\r\n\ttakeUntil(predicate:PredicateWithIndex<T>, includeUntilValue?:boolean):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException('predicate');\r\n\r\n\t\tif(!includeUntilValue)\r\n\t\t\treturn <any>this.doAction(\r\n\t\t\t\t(element:T, index:number) =>\r\n\t\t\t\t\tpredicate(element, index)\r\n\t\t\t\t\t\t? EnumerableAction.Break\r\n\t\t\t\t\t\t: EnumerableAction.Return,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t\t);\r\n\r\n\t\tlet found:boolean = false;\r\n\t\treturn <any>this.doAction(\r\n\t\t\t(element:T, index:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(found)\r\n\t\t\t\t\treturn EnumerableAction.Break;\r\n\r\n\t\t\t\tfound = predicate(element, index);\r\n\t\t\t\treturn EnumerableAction.Return;\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tfound = false;\r\n\t\t\t},\r\n\t\t\tnull // We don't know the state if it is endless or not.\r\n\t\t);\r\n\t}\r\n\r\n\t// Since an infinite enumerable will always end up traversing breadth first, we have this only here for regular enumerable.\r\n\ttraverseBreadthFirst(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined):LinqEnumerable<T>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T | TNode) => ForEachEnumerable<TNode> | null | undefined):LinqEnumerable<TNode>;\r\n\r\n\ttraverseBreadthFirst<TResult>(\r\n\t\tchildrenSelector:(element:T) => ForEachEnumerable<T> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode, TResult>(\r\n\t\tchildrenSelector:(element:T | TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>;\r\n\r\n\ttraverseBreadthFirst<TNode>(\r\n\t\tchildrenSelector:(element:T | TNode) => ForEachEnumerable<TNode> | null | undefined,\r\n\t\tresultSelector:(\r\n\t\t\telement:TNode,\r\n\t\t\tnestLevel:number) => any = Functions.Identity):LinqEnumerable<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\r\n\t\tconst isEndless = _._isEndless; // Is endless is not affirmative if false.\r\n\r\n\r\n\t\treturn new LinqEnumerable<any>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<any>;\r\n\t\t\t\tlet nestLevel:number = 0;\r\n\t\t\t\tlet buffer:any[], len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<any>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tnestLevel = 0;\r\n\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\r\n\t\t\t\t\t\twhile(true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbuffer[len++] = enumerator.current;\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(resultSelector(enumerator.current, nestLevel));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\t\tlet next = Enumerable\r\n\t\t\t\t\t\t\t\t.from(buffer)\r\n\t\t\t\t\t\t\t\t.selectMany(childrenSelector);\r\n\r\n\t\t\t\t\t\t\tif(!next.any())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tnestLevel++;\r\n\t\t\t\t\t\t\t\tbuffer = [];\r\n\t\t\t\t\t\t\t\tlen = 0;\r\n\t\t\t\t\t\t\t\tenumerator.dispose();\r\n\t\t\t\t\t\t\t\tenumerator = next.getEnumerator();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t},\r\n\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:ActionWithIndex<T>, max?:number):number\r\n\tforEach(action:PredicateWithIndex<T>, max?:number):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tif(!action)\r\n\t\t\tthrow new ArgumentNullException(\"action\");\r\n\t\tthrowIfEndless(_.isEndless);\r\n\r\n\t\t/*\r\n\t\t// It could be just as easy to do the following:\r\n\t\treturn enumUtil.forEach(_, action, max);\r\n\t\t// But to be more active about checking for disposal, we use this instead:\r\n\t\t*/\r\n\r\n\r\n\t\t// Return value of action can be anything, but if it is (===) false then the enumUtil.forEach will discontinue.\r\n\t\treturn max>0 ? using(\r\n\t\t\t_.getEnumerator(), e =>\r\n\t\t\t{\r\n\r\n\t\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\t// It is possible that subsequently 'action' could cause the enumeration to dispose, so we have to check each time.\r\n\t\t\t\twhile(max>i && _.throwIfDisposed() && e.moveNext())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(action(<T>e.current, i++)===false)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t) : 0;\r\n\t}\r\n\r\n\t// #region Conversion Methods\r\n\ttoArray(predicate?:PredicateWithIndex<T>):T[]\r\n\t{\r\n\t\treturn predicate\r\n\t\t\t? this.where(predicate).toArray()\r\n\t\t\t: this.copyTo([]);\r\n\t}\r\n\r\n\tcopyTo(target:T[], index:number = 0, count:number = Infinity):T[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(!target) throw new ArgumentNullException(\"target\");\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\t// If not exposing an action that could cause dispose, then use enumUtil.forEach utility instead.\r\n\t\tenumUtil.forEach<T>(this, (x, i) =>\r\n\t\t{\r\n\t\t\ttarget[i + index] = x\r\n\t\t}, count);\r\n\r\n\t\treturn target;\r\n\t}\r\n\r\n\r\n\ttoLookup<TKey, TValue>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TValue>             = <any>Functions.Identity,\r\n\t\tcompareSelector:HashSelector<TKey> = <any>Functions.Identity):Lookup<TKey, TValue>\r\n\t{\r\n\t\tconst dict:Dictionary<TKey, TValue[]> = new Dictionary<TKey, TValue[]>(compareSelector);\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tlet key = keySelector(x, i);\r\n\t\t\t\tlet element = elementSelector(x, i);\r\n\r\n\t\t\t\tlet array = dict.getValue(key);\r\n\t\t\t\tif(array!==VOID0) array.push(element);\r\n\t\t\t\telse dict.addByKeyValue(key, [element]);\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn new Lookup<TKey, TValue>(dict);\r\n\t}\r\n\r\n\ttoMap<TResult>(\r\n\t\tkeySelector:SelectorWithIndex<T, string | number | symbol>,\r\n\t\telementSelector:SelectorWithIndex<T, TResult>):IMap<TResult>\r\n\t{\r\n\t\tconst obj:IMap<TResult> = {};\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\t//@ts-ignore\r\n\t\t\tobj[keySelector(x, i)] = elementSelector(x, i);\r\n\t\t});\r\n\t\treturn obj;\r\n\t}\r\n\r\n\r\n\ttoDictionary<TKey, TValue>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TValue>,\r\n\t\tcompareSelector:HashSelector<TKey> = <any>Functions.Identity):IDictionary<TKey, TValue>\r\n\t{\r\n\t\tconst dict:Dictionary<TKey, TValue> = new Dictionary<TKey, TValue>(compareSelector);\r\n\t\tthis.forEach((x, i) => dict.addByKeyValue(keySelector(x, i), elementSelector(x, i)));\r\n\t\treturn dict;\r\n\t}\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = <any>Functions.Identity)\r\n\t{\r\n\t\treturn this\r\n\t\t\t.select(selector)\r\n\t\t\t.toArray()\r\n\t\t\t.join(separator);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!(count>0)) // Out of bounds?\r\n\t\t\treturn _;\r\n\r\n\t\tif(!isFinite(count)) // +Infinity equals skip all so return empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\t\tconst c = count;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet q:Queue<T>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tq = new Queue<T>();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Add the next one to the queue.\r\n\t\t\t\t\t\t\tq.enqueue(<T>enumerator.current);\r\n\r\n\t\t\t\t\t\t\t// Did we reach our quota?\r\n\t\t\t\t\t\t\tif(q.count>c)\r\n\t\t\t\t\t\t\t// Okay then, start returning results.\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(q.dequeue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tif(q) q.dispose();\r\n\t\t\t\t\t\tq = NULL;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tif(!(count>0)) // Out of bounds? Empty.\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!isFinite(count)) // Infinity means return all.\r\n\t\t\treturn _;\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\t// This sets up the query so nothing is done until move next is called.\r\n\t\treturn <any> _.reverse()\r\n\t\t\t.take(count)\r\n\t\t\t.reverse();\r\n\t}\r\n\r\n\t// To help with type guarding.\r\n\r\n\tselect<TResult>(selector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>\r\n\t{\r\n\t\treturn <LinqEnumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tmap<TResult>(selector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>\r\n\t{\r\n\t\treturn <LinqEnumerable<TResult>>super.select(selector);\r\n\t}\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TResult> | null | undefined>):LinqEnumerable<TResult>;\r\n\r\n\tselectMany<TElement, TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<TElement> | null | undefined>,\r\n\t\tresultSelector:(collection:T, element:TElement) => TResult):LinqEnumerable<TResult>;\r\n\r\n\tselectMany<TResult>(\r\n\t\tcollectionSelector:SelectorWithIndex<T, ForEachEnumerable<any> | null | undefined>,\r\n\t\tresultSelector?:(collection:T, element:any) => TResult):LinqEnumerable<TResult>\r\n\t{\r\n\t\treturn this._selectMany(collectionSelector, resultSelector);\r\n\t}\r\n\r\n\tchoose():LinqEnumerable<T>;\r\n\tchoose<TResult>(selector:SelectorWithIndex<T, TResult>):LinqEnumerable<TResult>\r\n\tchoose(selector:SelectorWithIndex<T, any> = Functions.Identity):LinqEnumerable<any>\r\n\t{\r\n\t\treturn this._filterSelected(selector, isNotNullOrUndefined);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot reverse an endless collection...\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tindex = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) => !!index && yielder.yieldReturn(buffer[--index]),\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tshuffle():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\t\tthrowIfEndless(_._isEndless); // Cannot shuffle an endless collection...\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet buffer:T[];\r\n\t\t\t\tlet capacity:number;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tbuffer = _.toArray();\r\n\t\t\t\t\t\tcapacity = len = buffer.length;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Avoid using major array operations like .slice();\r\n\t\t\t\t\t\tif(!len)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet selectedIndex = Random.integer(len);\r\n\t\t\t\t\t\tlet selectedValue = buffer[selectedIndex];\r\n\r\n\t\t\t\t\t\tbuffer[selectedIndex] = buffer[--len]; // Take the last one and put it here.\r\n\t\t\t\t\t\tbuffer[len] = NULL; // clear possible reference.\r\n\r\n\t\t\t\t\t\tif(len%32==0) // Shrink?\r\n\t\t\t\t\t\t\tbuffer.length = len;\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(selectedValue);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tcount(predicate?:PredicateWithIndex<T>):number\r\n\t{\r\n\t\tlet count:number = 0;\r\n\t\tthis.forEach(\r\n\t\t\tpredicate\r\n\r\n\t\t\t\t? (x, i) =>\r\n\t\t\t{\r\n\t\t\t\tif(predicate(x, i)) ++count;\r\n\t\t\t}\r\n\r\n\t\t\t\t: () =>\r\n\t\t\t{\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\t// Akin to '.every' on an array.\r\n\tall(predicate:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\tthrow new ArgumentNullException(\"predicate\");\r\n\r\n\t\tlet result = true;\r\n\t\tthis.forEach((x, i) =>\r\n\t\t{\r\n\t\t\tif(!predicate(x, i))\r\n\t\t\t{\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn false; // break\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// 'every' has been added here for parity/compatibility with an array.\r\n\tevery(predicate:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.all(predicate);\r\n\t}\r\n\r\n\t// Akin to '.some' on an array.\r\n\tany(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tif(!predicate)\r\n\t\t\treturn super.any();\r\n\r\n\t\tlet result = false;\r\n\t\t// Splitting the forEach up this way reduces iterative processing.\r\n\t\t// forEach handles the generation and disposal of the enumerator.\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tresult = predicate(x, i); // false = not found and therefore it should continue.  true = found and break;\r\n\t\t\t\treturn !result;\r\n\t\t\t});\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t// 'some' has been added here for parity/compatibility with an array.\r\n\tsome(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\treturn this.any(predicate);\r\n\t}\r\n\r\n\r\n\tcontains(value:T, compareSelector?:Selector<T, any>):boolean\r\n\t{\r\n\t\tif(compareSelector)\r\n\t\t{\r\n\t\t\tconst s = compareSelector(value);\r\n\t\t\treturn this.any(v => areEqualValues(compareSelector(v), s));\r\n\t\t}\r\n\t\treturn this.any(v => areEqualValues(v, value));\r\n\t}\r\n\r\n\t// Originally has an overload for a predicate,\r\n\t// but that's a bad idea since this could be an enumeration of functions and therefore fail the intent.\r\n\t// Better to chain a where statement first to be more explicit.\r\n\tindexOf(value:T, compareSelector?:SelectorWithIndex<T, any>):number\r\n\t{\r\n\t\tlet found:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t? (element:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(areEqualValues(compareSelector(element, i), compareSelector(value, i), true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t: (element:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\t// Why?  Because NaN doesn't equal NaN. :P\r\n\t\t\t\tif(areEqualValues(element, value, true))\r\n\t\t\t\t{\r\n\t\t\t\t\tfound = i;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tlastIndexOf(value:T, compareSelector?:SelectorWithIndex<T, any>):number\r\n\t{\r\n\t\tlet result:number = -1;\r\n\t\tthis.forEach(\r\n\t\t\tcompareSelector\r\n\t\t\t\t? (element:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(areEqualValues(compareSelector(element, i), compareSelector(value, i), true)) result\r\n\t\t\t\t\t= i;\r\n\t\t\t}\r\n\r\n\t\t\t\t: (element:T, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(areEqualValues(element, value, true)) result = i;\r\n\t\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\tintersect(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tcompareSelector?:HashSelector<T>):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!second)\r\n\t\t\tthrow new ArgumentNullException(\"second\");\r\n\r\n\t\tconst isEndless = _.isEndless;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet keys:Dictionary<T, boolean>;\r\n\t\t\t\tlet outs:Dictionary<T, boolean>;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!second);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\r\n\t\t\t\t\t\tkeys = new Dictionary<T, boolean>(compareSelector);\r\n\t\t\t\t\t\touts = new Dictionary<T, boolean>(compareSelector);\r\n\r\n\t\t\t\t\t\tenumUtil.forEach(second, key =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkeys.addByKeyValue(key, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet current = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(!outs.containsKey(current) && keys.containsKey(current))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\touts.addByKeyValue(current, true);\r\n\t\t\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tif(keys) enumerator.dispose();\r\n\t\t\t\t\t\tif(outs) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tkeys = NULL;\r\n\t\t\t\t\t\touts = NULL;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tisEndless\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsecond = NULL;\r\n\t\t\t},\r\n\t\t\tisEndless\r\n\t\t);\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqualValues):boolean\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn using(\r\n\t\t\tthis.getEnumerator(),\r\n\t\t\te1 => using(\r\n\t\t\t\tenumUtil.from(second),\r\n\t\t\t\te2 =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// if both are endless, this will never evaluate.\r\n\t\t\t\t\tthrowIfEndless(e1.isEndless && e2.isEndless);\r\n\r\n\t\t\t\t\twhile(e1.moveNext())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!e2.moveNext() || !equalityComparer(<T>e1.current, <T>e2.current))\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn !e2.moveNext();\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t//isEquivalent(second:ForEachEnumerable<T>,\r\n\t//\tequalityComparer:EqualityComparison<T> = valuesAreEqual):boolean\r\n\t//{\r\n\t//\treturn this\r\n\t//\t\t.orderBy(keySelector)\r\n\t//\t\t.sequenceEqual(Enumerable.from(second).orderBy(keySelector))\r\n\t//}\r\n\r\n\r\n\t// #endregion\r\n\r\n\r\n\tofType<TType>(type:{ new (...params:any[]):TType }):LinqEnumerable<TType>;\r\n\tofType<TType>(type:any):LinqEnumerable<TType>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn <LinqEnumerable<TType>>super.ofType(type);\r\n\t}\r\n\r\n// #region Ordering Methods\r\n\r\n\torderBy<TKey extends Comparable>(keySelector:Selector<T, TKey> = <any>Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T, TKey>(this, keySelector, Order.Ascending);\r\n\t}\r\n\r\n\torderUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T, any>(this, null, Order.Ascending, null, comparison);\r\n\t}\r\n\r\n\torderUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T, any>(this, null, Order.Descending, null, comparison);\r\n\t}\r\n\r\n\torderByDescending<TKey extends Comparable>(keySelector:Selector<T, TKey> = <any>Functions.Identity):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T, TKey>(this, keySelector, Order.Descending);\r\n\t}\r\n\r\n\t/*\r\n\t\t weightedSample(weightSelector) {\r\n\t\t weightSelector = Utils.createLambda(weightSelector);\r\n\t\t var source = this;\r\n\r\n\t\t return new LinqEnumerable<T>(() => {\r\n\t\t var sortedByBound;\r\n\t\t var totalWeight = 0;\r\n\r\n\t\t return new EnumeratorBase<T>(\r\n\t\t () => {\r\n\t\t sortedByBound = source\r\n\t\t .choose(function (x) {\r\n\t\t var weight = weightSelector(x);\r\n\t\t if (weight <= 0) return null; // ignore 0\r\n\r\n\t\t totalWeight += weight;\r\n\t\t return { value: x, bound: totalWeight }\r\n\t\t })\r\n\t\t .toArray();\r\n\t\t },\r\n\t\t () => {\r\n\t\t if (sortedByBound.length > 0) {\r\n\t\t var draw = (Math.random() * totalWeight) + 1;\r\n\r\n\t\t var lower = -1;\r\n\t\t var upper = sortedByBound.length;\r\n\t\t while (upper - lower > 1) {\r\n\t\t var index = ((lower + upper) / 2);\r\n\t\t if (sortedByBound[index].bound >= draw) {\r\n\t\t upper = index;\r\n\t\t }\r\n\t\t else {\r\n\t\t lower = index;\r\n\t\t }\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldReturn(sortedByBound[upper].value);\r\n\t\t }\r\n\r\n\t\t return (<any>this).yieldBreak();\r\n\t\t },\r\n\t\t Functions.Blank);\r\n\t\t });\r\n\t\t }\r\n\t\t */\r\n\t// #endregion\r\n\r\n\tbuffer(size:number):LinqEnumerable<T[]>\r\n\t{\r\n\t\treturn <LinqEnumerable<T[]>>super.buffer(size);\r\n\t}\r\n\r\n\t// #region Grouping Methods\r\n\r\n\t// Originally contained a result selector (not common use), but this could be done simply by a select statement after.\r\n\r\n\tgroupBy<TKey>(keySelector:SelectorWithIndex<T, TKey>):LinqEnumerable<Grouping<TKey, T>>;\r\n\r\n\tgroupBy<TKey>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, T>,\r\n\t\tcompareSelector?:HashSelector<TKey>):LinqEnumerable<Grouping<TKey, T>>;\r\n\r\n\tgroupBy<TKey, TElement>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey>,\r\n\t\telementSelector:SelectorWithIndex<T, TElement>,\r\n\t\tcompareSelector?:HashSelector<TKey>):LinqEnumerable<Grouping<TKey, TElement>>\r\n\r\n\r\n\tgroupBy<TKey, TElement>(\r\n\t\tkeySelector:SelectorWithIndex<T, TKey> | Selector<T, TKey>,\r\n\t\telementSelector?:SelectorWithIndex<T, TElement> | Selector<T, TElement>,\r\n\t\tcompareSelector?:HashSelector<TKey>):LinqEnumerable<Grouping<TKey, TElement>>\r\n\t{\r\n\t\tif(!elementSelector) elementSelector = <any>Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new LinqEnumerable<Grouping<TKey, TElement>>(\r\n\t\t\t() => this\r\n\t\t\t\t.toLookup(keySelector, elementSelector, compareSelector)\r\n\t\t\t\t.getEnumerator()\r\n\t\t);\r\n\t}\r\n\r\n\tpartitionBy<TKey>(keySelector:Selector<T, TKey>):LinqEnumerable<Grouping<TKey, T>>;\r\n\tpartitionBy<TKey, TElement>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector?:(key:TKey, element:TElement[]) => Grouping<TKey, TElement>,\r\n\t\tcompareSelector?:Selector<TKey, any>):LinqEnumerable<Grouping<TKey, TElement>>;\r\n\tpartitionBy<TKey, TElement>(\r\n\t\tkeySelector:Selector<T, TKey>,\r\n\t\telementSelector?:Selector<T, TElement>,\r\n\t\tresultSelector:(key:TKey, element:TElement[]) => Grouping<TKey, TElement>\r\n\t\t\t= (key:TKey, elements:TElement[]) => new Grouping<TKey, TElement>(key, elements),\r\n\t\tcompareSelector:Selector<TKey, any>\r\n\t\t\t= <any>Functions.Identity):LinqEnumerable<Grouping<TKey, T>> | LinqEnumerable<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tif(!elementSelector) elementSelector = <any>Functions.Identity; // Allow for 'null' and not just undefined.\r\n\t\treturn new LinqEnumerable<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet enumerator:IEnumerator<T>;\r\n\t\t\t\tlet key:TKey;\r\n\t\t\t\tlet compareKey:any;\r\n\t\t\t\tlet group:TElement[] | null;\r\n\t\t\t\tlet len:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!elementSelector);\r\n\t\t\t\t\t\tenumerator = _.getEnumerator();\r\n\t\t\t\t\t\tif(enumerator.moveNext())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet v = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(v);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(v)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!elementSelector);\r\n\r\n\t\t\t\t\t\tif(!group)\r\n\t\t\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\t\t\tlet hasNext:boolean, c:T;\r\n\t\t\t\t\t\twhile((hasNext = enumerator.moveNext()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tif(areEqualValues(compareKey, compareSelector(keySelector(c))))\r\n\t\t\t\t\t\t\t\tgroup[len++] = elementSelector!(c);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet result:Grouping<TKey, TElement>\r\n\t\t\t\t\t\t\t    = resultSelector(key, group);\r\n\r\n\t\t\t\t\t\tif(hasNext)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tc = <T>enumerator.current;\r\n\t\t\t\t\t\t\tkey = keySelector(c);\r\n\t\t\t\t\t\t\tcompareKey = compareSelector(key);\r\n\t\t\t\t\t\t\tgroup = [elementSelector!(c)];\r\n\t\t\t\t\t\t\tlen = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\t\t\tenumerator = NULL;\r\n\t\t\t\t\t\tgroup = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\telementSelector = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Aggregate Methods\r\n\r\n\tflatten<TFlat>():LinqEnumerable<TFlat>\r\n\tflatten():LinqEnumerable<any>\r\n\tflatten():LinqEnumerable<any>\r\n\t{\r\n\t\treturn <any>super.flatten();\r\n\t}\r\n\r\n\tpairwise<TSelect>(\r\n\t\tselector:(\r\n\t\t\tprevious:T, current:T,\r\n\t\t\tindex:number) => TSelect):LinqEnumerable<TSelect>\r\n\t{\r\n\t\treturn <any>super.pairwise(selector);\r\n\t}\r\n\r\n\taggregate(\r\n\t\treduction:(previous:T, current:T, index?:number) => T):T | undefined;\r\n\r\n\taggregate<U>(\r\n\t\treduction:(previous:U, current:T, index?:number) => U,\r\n\t\tinitialValue:U):U;\r\n\r\n\taggregate<U>(\r\n\t\treduction:(previous:U, current:T, index?:number) => U,\r\n\t\tinitialValue?:U):U | undefined\r\n\t{\r\n\t\tif(initialValue==VOID0)\r\n\t\t{\r\n\t\t\tthis.forEach((value, i) =>\r\n\t\t\t{\r\n\t\t\t\tinitialValue = i\r\n\t\t\t\t\t? reduction(initialValue!, value, i)\r\n\t\t\t\t\t: <any>value\r\n\t\t\t});\r\n\t\t} else {\r\n\r\n\t\t\tthis.forEach((value, i) =>\r\n\t\t\t{\r\n\t\t\t\tinitialValue = reduction(initialValue!, value, i)\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t\treturn initialValue;\r\n\t}\r\n\r\n\treduce<T>(\r\n\t\treduction:(previous:T, current:T, index?:number) => T):T | undefined;\r\n\r\n\treduce<U>(\r\n\t\treduction:(previous:U, current:T, index?:number) => U,\r\n\t\tinitialValue:U):U;\r\n\r\n\t/**\r\n\t * Provided as an analog for array.reduce.  Simply a shortcut for aggregate.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previous:U, current:T, index?:number) => U,\r\n\t\tinitialValue?:U):U | undefined\r\n\t{\r\n\t\t//@ts-ignore\r\n\t\treturn this.aggregate(reduction, initialValue);\r\n\t}\r\n\r\n\taverage(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet count = 0;\r\n\t\tconst sum = this.sum((e, i) =>\r\n\t\t{\r\n\t\t\tcount++;\r\n\t\t\treturn selector(e, i);\r\n\t\t});\r\n\r\n\t\treturn (isNaN(sum) || !count)\r\n\t\t\t? NaN\r\n\t\t\t: (sum/count);\r\n\t}\r\n\r\n\t// If using numbers, it may be useful to call .takeUntil(v=>v==Infinity,true) before calling max. See static versions for numbers.\r\n\tmax():T | undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Greater);\r\n\t}\r\n\r\n\tmin():T | undefined\r\n\t{\r\n\t\treturn this.aggregate(Functions.Lesser);\r\n\t}\r\n\r\n\tmaxBy(keySelector:Selector<T, Primitive> = <any>Functions.Identity):T | undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)>keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\tminBy(keySelector:Selector<T, Primitive> = <any>Functions.Identity):T | undefined\r\n\t{\r\n\t\treturn this.aggregate((a:T, b:T) => (keySelector(a)<keySelector(b)) ? a : b);\r\n\t}\r\n\r\n\t// Addition...  Only works with numerical enumerations.\r\n\tsum(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet sum = 0;\r\n\r\n\t\t// This allows for infinity math that doesn't destroy the other values.\r\n\t\tlet sumInfinite = 0; // Needs more investigation since we are really trying to retain signs.\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tsum = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(isFinite(value))\r\n\t\t\t\t\tsum += value;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumInfinite +=\r\n\t\t\t\t\t\tvalue>0 ? (+1) : (-1);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn isNaN(sum) ? NaN : (sumInfinite ? (sumInfinite*Infinity) : sum);\r\n\t}\r\n\r\n\t// Multiplication...\r\n\tproduct(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet result = 1, exists:boolean = false;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\texists = true;\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tif(isNaN(value))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(value==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = 0; // Multiplying by zero will always end in zero.\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Multiplication can never recover from infinity and simply must retain signs.\r\n\t\t\t\t// You could cancel out infinity with 1/infinity but no available representation exists.\r\n\t\t\t\tresult *= value;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn (exists && isNaN(result)) ? NaN : result;\r\n\t}\r\n\r\n\t/**\r\n\t * Takes the first number and divides it by all following.\r\n\t * @param selector\r\n\t * @returns {number}\r\n\t */\r\n\tquotient(selector:SelectorWithIndex<T, number> = Type.numberOrNaN):number\r\n\t{\r\n\t\tlet count = 0;\r\n\t\tlet result:number = NaN;\r\n\r\n\t\tthis.forEach(\r\n\t\t\t(x, i) =>\r\n\t\t\t{\r\n\t\t\t\tlet value = selector(x, i);\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif(count===1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = value;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isNaN(value) || value===0 || !isFinite(value))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult = NaN;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresult /= value;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(count===1)\r\n\t\t\tresult = NaN;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region Single Value Return...\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet value:T | undefined = VOID0;\r\n\t\tlet found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tif(!found) throw new Error(\"last:No element satisfies the condition.\");\r\n\t\treturn <any>value;\r\n\t}\r\n\r\n\tlastOrDefault():T | undefined\r\n\tlastOrDefault(defaultValue:T):T\r\n\tlastOrDefault(defaultValue?:T):T | undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet value:T | undefined = VOID0;\r\n\t\tlet found:boolean = false;\r\n\t\t_.forEach(\r\n\t\t\tx =>\r\n\t\t\t{\r\n\t\t\t\tfound = true;\r\n\t\t\t\tvalue = x;\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn (!found) ? defaultValue : value;\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tmemoize():LinqEnumerable<T>\r\n\t{\r\n\t\tlet source = new LazyList(this);\r\n\t\treturn <this>(new LinqEnumerable(() => source.getEnumerator(), () =>\r\n\t\t{\r\n\t\t\tsource.dispose();\r\n\t\t\tsource = <any>null\r\n\t\t}, this.isEndless));\r\n\t}\r\n\r\n\tthrowWhenEmpty():NotEmptyEnumerable<T>\r\n\t{\r\n\t\treturn <any>this.doAction(RETURN, null, this.isEndless, count =>\r\n\t\t{\r\n\t\t\tif(!count) throw \"Collection is empty.\";\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport interface NotEmptyEnumerable<T> extends LinqEnumerable<T>\r\n{\r\n\taggregate(\r\n\t\treduction:(previous:T, current:T, index?:number) => T):T;\r\n\treduce(\r\n\t\treduction:(previous:T, current:T, index?:number) => T):T;\r\n\r\n\tmax():T\r\n\tmin():T\r\n\tmaxBy(keySelector?:Selector<T, Primitive>):T\r\n\tminBy(keySelector?:Selector<T, Primitive>):T\r\n}\r\n\r\n// Provided for type guarding.\r\nexport class FiniteEnumerable<T>\r\n\textends LinqEnumerable<T>\r\n{\r\n\tconstructor(\r\n\t\tenumeratorFactory:() => IEnumerator<T>,\r\n\t\tfinalizer?:Closure)\r\n\t{\r\n\t\tsuper(enumeratorFactory, finalizer, false);\r\n\t\t// @ts-ignore\r\n\t\tthis._disposableObjectName = \"FiniteEnumerable\";\r\n\t}\r\n\r\n}\r\n\r\nexport interface IOrderedEnumerable<T> extends FiniteEnumerable<T>\r\n{\r\n\tthenBy(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenByDescending(keySelector:(value:T) => any):IOrderedEnumerable<T>;\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>;\r\n}\r\n\r\nexport class ArrayEnumerable<T>\r\n\textends FiniteEnumerable<T>\r\n{\r\n\tprivate _source:ArrayLike<T>;\r\n\r\n\tconstructor(source:ArrayLike<T>)\r\n\t{\r\n\t\tsuper(() =>\r\n\t\t{\r\n\t\t\t_.throwIfDisposed();\r\n\t\t\treturn new ArrayEnumerator<T>(() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed(\"The underlying ArrayEnumerable was disposed.\", \"ArrayEnumerator\");\r\n\r\n\t\t\t\treturn _._source; // Should never be null, but ArrayEnumerable if not disposed simply treats null as empty array.\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst _ = this;\r\n\t\t// @ts-ignore\r\n\t\tthis._disposableObjectName = \"ArrayEnumerable\";\r\n\t\tthis._source = source;\r\n\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source = NULL;\r\n\t}\r\n\r\n\tget source():ArrayLike<T>\r\n\t{\r\n\t\treturn this._source;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn enumUtil.toArray(_._source);\r\n\t}\r\n\r\n\tasEnumerable():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <any> new ArrayEnumerable<T>(this._source);\r\n\t}\r\n\r\n\t// Optimize forEach so that subsequent usage is optimized.\r\n\tforEach(action:ActionWithIndex<T>, max?:number):number\r\n\tforEach(action:PredicateWithIndex<T>, max?:number):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, max:number = Infinity):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn enumUtil.forEach(_._source, action, max);\r\n\t}\r\n\r\n\t// These methods should ALWAYS check for array length before attempting anything.\r\n\r\n\tany(predicate?:PredicateWithIndex<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source;\r\n\t\tlet len = source.length;\r\n\t\treturn !!len && (!predicate || super.any(predicate));\r\n\t}\r\n\r\n\tcount(predicate?:PredicateWithIndex<T>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source, len = source.length;\r\n\t\treturn len && (predicate ? super.count(predicate) : len);\r\n\t}\r\n\r\n\telementAtOrDefault(index:number):T | undefined\r\n\telementAtOrDefault(index:number, defaultValue:T):T\r\n\telementAtOrDefault(index:number, defaultValue?:T):T | undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index, 'index');\r\n\r\n\t\tconst source = _._source;\r\n\t\treturn index<source.length\r\n\t\t\t? source[index]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tlast():T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source, len = source.length;\r\n\t\treturn (len)\r\n\t\t\t? source[len - 1]\r\n\t\t\t: super.last();\r\n\t}\r\n\r\n\tlastOrDefault():T | undefined\r\n\tlastOrDefault(defaultValue:T):T\r\n\tlastOrDefault(defaultValue?:T):T | undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tconst source = _._source, len = source.length;\r\n\t\treturn len\r\n\t\t\t? source[len - 1]\r\n\t\t\t: defaultValue;\r\n\t}\r\n\r\n\tskip(count:number):this\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn _;\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() => new ArrayEnumerator<T>(() => _._source, count)\r\n\t\t);\r\n\t}\r\n\r\n\ttakeExceptLast(count:number = 1):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\treturn <any> _.take(_._source.length - count);\r\n\t}\r\n\r\n\tskipToLast(count:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn <any> Enumerable.empty<T>();\r\n\r\n\t\tif(!isFinite(count))\r\n\t\t\treturn _;\r\n\r\n\t\tconst len = _._source\r\n\t\t\t? _._source.length\r\n\t\t\t: 0;\r\n\r\n\t\treturn <any> _.skip(len - count);\r\n\t}\r\n\r\n\treverse():this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet disposed = !_.throwIfDisposed();\r\n\r\n\t\treturn <any> new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\treturn new IndexEnumerator<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet s = _._source;\r\n\t\t\t\t\t\tthrowIfDisposed(disposed || !s);\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tsource: s,\r\n\t\t\t\t\t\t\tpointer: (s.length - 1),\r\n\t\t\t\t\t\t\tlength: s.length,\r\n\t\t\t\t\t\t\tstep: -1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmemoize():this\r\n\t{\r\n\t\treturn this.asEnumerable();\r\n\t}\r\n\r\n\tsequenceEqual(\r\n\t\tsecond:ForEachEnumerable<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqualValues):boolean\r\n\t{\r\n\t\tif(Type.isArrayLike(second))\r\n\t\t\treturn Arrays.areEqual(this.source, second, true, equalityComparer);\r\n\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif(second instanceof ArrayEnumerable)\r\n\t\t\treturn second.sequenceEqual(this.source, equalityComparer);\r\n\r\n\t\treturn super.sequenceEqual(second, equalityComparer);\r\n\t}\r\n\r\n\r\n\ttoJoinedString(separator:string = \"\", selector:Selector<T, string> = <any>Functions.Identity)\r\n\t{\r\n\t\tconst s = this._source;\r\n\t\treturn !selector && (s) instanceof (Array)\r\n\t\t\t? (<Array<T>>s).join(separator)\r\n\t\t\t: super.toJoinedString(separator, selector);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport class Grouping<TKey, TElement>\r\n\textends ArrayEnumerable<TElement>\r\n{\r\n\r\n\tconstructor(private _groupKey:TKey, elements:TElement[])\r\n\t{\r\n\t\tsuper(elements);\r\n\t\t// @ts-ignore\r\n\t\tthis._disposableObjectName = \"Grouping\";\r\n\t}\r\n\r\n\tget key():TKey\r\n\t{\r\n\t\treturn this._groupKey;\r\n\t}\r\n}\r\n\r\nexport class Lookup<TKey, TElement>\r\n{\r\n\r\n\tconstructor(private _dictionary:IDictionary<TKey, TElement[]>)\r\n\t{\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._dictionary.count;\r\n\t}\r\n\r\n\tget(key:TKey):TElement[] | null\r\n\t{\r\n\t\treturn this._dictionary.getValue(key) || null;\r\n\t}\r\n\r\n\tcontains(key:TKey):boolean\r\n\t{\r\n\t\treturn this._dictionary.containsKey(key);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<Grouping<TKey, TElement>>\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\t\tlet enumerator:IEnumerator<IKeyValuePair<TKey, TElement[]>>;\r\n\r\n\t\treturn new EnumeratorBase<Grouping<TKey, TElement>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tenumerator = _._dictionary.getEnumerator();\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\r\n\t\t\t\tif(!enumerator.moveNext())\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\tlet current = <IKeyValuePair<TKey, TElement[]>>enumerator.current;\r\n\t\t\t\treturn yielder.yieldReturn(new Grouping<TKey, TElement>(current.key, current.value));\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(enumerator) enumerator.dispose();\r\n\t\t\t\tenumerator = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport class OrderedEnumerable<T, TOrderBy extends Comparable>\r\n\textends FiniteEnumerable<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tprivate source:IEnumerable<T>,\r\n\t\tpublic keySelector:Selector<T, TOrderBy> | null,\r\n\t\tpublic order:Order,\r\n\t\tpublic parent?:OrderedEnumerable<T, any> | null,\r\n\t\tpublic comparer:Comparison<T> = compareValues)\r\n\t{\r\n\t\tsuper(NULL);\r\n\t\tthrowIfEndless(source && source.isEndless);\r\n\t\t// @ts-ignore\r\n\t\tthis._disposableObjectName = \"OrderedEnumerable\";\r\n\t}\r\n\r\n\tprivate createOrderedEnumerable(\r\n\t\tkeySelector:Selector<T, TOrderBy>,\r\n\t\torder:Order):IOrderedEnumerable<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new OrderedEnumerable<T, TOrderBy>(this.source, keySelector, order, this);\r\n\t}\r\n\r\n\tthenBy(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Ascending);\r\n\t}\r\n\r\n\tthenUsing(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T, any>(this.source, null, Order.Ascending, this, comparison);\r\n\t}\r\n\r\n\tthenByDescending(keySelector:(value:T) => TOrderBy):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn this.createOrderedEnumerable(keySelector, Order.Descending);\r\n\t}\r\n\r\n\tthenUsingReversed(comparison:Comparison<T>):IOrderedEnumerable<T>\r\n\t{\r\n\t\treturn new OrderedEnumerable<T, any>(this.source, null, Order.Descending, this, comparison);\r\n\t}\r\n\r\n\tgetEnumerator():EnumeratorBase<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet buffer:T[];\r\n\t\tlet indexes:number[];\r\n\t\tlet index:number = 0;\r\n\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tindex = 0;\r\n\t\t\t\tbuffer = Enumerable.toArray(_.source);\r\n\t\t\t\tindexes = createSortContext(_)\r\n\t\t\t\t\t.generateSortedIndexes(buffer);\r\n\t\t\t},\r\n\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\treturn (index<indexes.length)\r\n\t\t\t\t\t? yielder.yieldReturn(buffer[indexes[index++]])\r\n\t\t\t\t\t: false;\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(buffer)\r\n\t\t\t\t\tbuffer.length = 0;\r\n\t\t\t\tbuffer = NULL;\r\n\t\t\t\tif(indexes)\r\n\t\t\t\t\tindexes.length = 0;\r\n\t\t\t\tindexes = NULL;\r\n\t\t\t},\r\n\r\n\t\t\tfalse\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tconst _:this = this;\r\n\t\tsuper._onDispose();\r\n\t\t_.source = NULL;\r\n\t\t_.keySelector = NULL;\r\n\t\t_.order = NULL;\r\n\t\t_.parent = NULL;\r\n\t}\r\n\r\n}\r\n\r\n// A private static helper for the weave function.\r\nfunction nextEnumerator<T>(queue:Queue<IEnumerator<T>>, e:IEnumerator<T>):IEnumerator<T> | null\r\n{\r\n\tif(e)\r\n\t{\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tqueue.enqueue(e);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(e) e.dispose();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\treturn e;\r\n}\r\n\r\n/**\r\n * Recursively builds a SortContext chain.\r\n * @param orderedEnumerable\r\n * @param currentContext\r\n * @returns {any}\r\n */\r\nfunction createSortContext<T, TOrderBy extends Comparable>(\r\n\torderedEnumerable:OrderedEnumerable<T, TOrderBy>,\r\n\tcurrentContext:IComparer<T> | null = null):KeySortedContext<T, TOrderBy>\r\n{\r\n\r\n\tconst context = new KeySortedContext<T, TOrderBy>(\r\n\t\tcurrentContext,\r\n\t\torderedEnumerable.keySelector,\r\n\t\torderedEnumerable.order,\r\n\t\torderedEnumerable.comparer);\r\n\r\n\tif(orderedEnumerable.parent)\r\n\t\treturn createSortContext(orderedEnumerable.parent, context);\r\n\r\n\treturn context;\r\n}\r\n\r\n// #region Helper Functions...\r\n// This allows for the use of a boolean instead of calling this.throwIfDisposed()\r\n// since there is a strong chance of introducing a circular reference.\r\n\r\nfunction throwIfDisposed(disposed:true):true\r\n//noinspection JSUnusedLocalSymbols\r\nfunction throwIfDisposed(disposed:false):never\r\n//noinspection JSUnusedLocalSymbols\r\nfunction throwIfDisposed(disposed:boolean):true | never\r\n//noinspection JSUnusedLocalSymbols\r\nfunction throwIfDisposed(disposed:boolean):true | never\r\n{\r\n\tif(disposed) throw new ObjectDisposedException(\"Enumerable\");\r\n\treturn true;\r\n}\r\n// #endregion\r\n\r\nexport function Enumerable<T>(\r\n\tsource:InfiniteValueFactory<T>):InfiniteLinqEnumerable<T>\r\nexport function Enumerable<T>(\r\n\tsource:ForEachEnumerable<T>,\r\n\t...additional:Array<ForEachEnumerable<T>>):LinqEnumerable<T>\r\nexport function Enumerable<T>(\r\n\tsource:ForEachEnumerable<T> | InfiniteValueFactory<T>,\r\n\t...additional:Array<ForEachEnumerable<T>>):LinqEnumerable<T>\r\n{\r\n\treturn enumerableFrom(source, additional);\r\n}\r\n\r\nfunction enumerableFrom<T>(\r\n\tsource:ForEachEnumerable<T> | InfiniteValueFactory<T>,\r\n\tadditional?:Array<ForEachEnumerable<T>>):LinqEnumerable<T>\r\n{\r\n\tlet e = Enumerable.fromAny<T>(<any>source);\r\n\tif(!e) throw new UnsupportedEnumerableException();\r\n\r\n\treturn (additional && additional.length)\r\n\t\t? <any>e.merge(additional)\r\n\t\t: <any>e;\r\n}\r\n\r\nexport module Enumerable\r\n{\r\n\t/**\r\n\t * Universal method for converting a primitive enumerables into a LINQ enabled ones.\r\n\t *\r\n\t * Is not limited to TypeScript usages.\r\n\t */\r\n\texport function from<T>(source:InfiniteValueFactory<T>):InfiniteLinqEnumerable<T>\r\n\texport function from<T>(\r\n\t\tsource:ForEachEnumerable<T>,\r\n\t\t...additional:Array<ForEachEnumerable<T>>):LinqEnumerable<T>\r\n\texport function from<T>(\r\n\t\tsource:ForEachEnumerable<T> | InfiniteValueFactory<T>,\r\n\t\t...additional:Array<ForEachEnumerable<T>>):LinqEnumerable<T>\r\n\t{\r\n\t\treturn enumerableFrom(source, additional);\r\n\t}\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:InfiniteValueFactory<T>):InfiniteLinqEnumerable<T>\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:ForEachEnumerable<T>):LinqEnumerable<T>\r\n\r\n\texport function fromAny(\r\n\t\tsource:any):LinqEnumerable<any> | undefined\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:ForEachEnumerable<T>,\r\n\t\tdefaultEnumerable:LinqEnumerable<T>):LinqEnumerable<T>\r\n\r\n\texport function fromAny<T>(\r\n\t\tsource:any,\r\n\t\tdefaultEnumerable?:LinqEnumerable<T>):LinqEnumerable<T> | InfiniteLinqEnumerable<T> | undefined\r\n\t{\r\n\t\tif(Type.isObject(source) || Type.isString(source))\r\n\t\t{\r\n\t\t\tif(source instanceof InfiniteLinqEnumerable)\r\n\t\t\t\treturn source;\r\n\r\n\t\t\tif(Type.isArrayLike<T>(source))\r\n\t\t\t\treturn new ArrayEnumerable<T>(source);\r\n\r\n\t\t\tif(isEnumerable<T>(source))\r\n\t\t\t\treturn new LinqEnumerable<T>(\r\n\t\t\t\t\t() => source.getEnumerator(),\r\n\t\t\t\t\tnull, source.isEndless);\r\n\r\n\t\t\tif(isEnumerator<T>(source))\r\n\t\t\t\treturn new LinqEnumerable<T>(\r\n\t\t\t\t\t() => source, null, source.isEndless);\r\n\r\n\t\t\tif(isIterator<T>(source))\r\n\t\t\t\treturn fromAny(new IteratorEnumerator(source));\r\n\t\t}\r\n\t\telse if(Type.isFunction(source))\r\n\t\t{\r\n\t\t\treturn new InfiniteLinqEnumerable<T>(\r\n\t\t\t\t() => new InfiniteEnumerator<T>(source));\r\n\t\t}\r\n\r\n\t\treturn defaultEnumerable;\r\n\t}\r\n\r\n\texport function fromThese<T>(sources:ForEachEnumerable<T>[]):LinqEnumerable<T>\r\n\t{\r\n\t\tswitch(sources ? sources.length : 0)\r\n\t\t{\r\n\t\t\tcase 0:\r\n\t\t\t\treturn empty<T>();\r\n\t\t\tcase 1:\r\n\t\t\t\t// Allow for validation and throwing...\r\n\t\t\t\treturn enumerableFrom<T>(sources[0]);\r\n\t\t\tdefault:\r\n\t\t\t\treturn empty<T>().merge(sources);\r\n\t\t}\r\n\t}\r\n\r\n\texport function fromOrEmpty<T>(source:ForEachEnumerable<T>):LinqEnumerable<T>\r\n\t{\r\n\t\treturn fromAny(source) || empty<T>();\r\n\t}\r\n\r\n\t/**\r\n\t * Static helper for converting enumerables to an array.\r\n\t * @param source\r\n\t * @returns {any}\r\n\t */\r\n\texport function toArray<T>(source:ForEachEnumerable<T>):T[]\r\n\t{\r\n\t\t// noinspection SuspiciousInstanceOfGuard\r\n\t\tif(source instanceof LinqEnumerable)\r\n\t\t\treturn source.toArray();\r\n\r\n\t\treturn enumUtil.toArray(source);\r\n\t}\r\n\r\n\r\n\texport function _choice<T>(values:T[]):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteLinqEnumerable<T>(\r\n\t\t\t() => new EnumeratorBase<T>(\r\n\t\t\t\tnull,\r\n\t\t\t\t(yielder) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthrowIfDisposed(!values);\r\n\t\t\t\t\treturn yielder.yieldReturn(Random.select.one(values));\r\n\t\t\t\t},\r\n\t\t\t\ttrue // Is endless!\r\n\t\t\t),\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvalues.length = 0;\r\n\t\t\t\tvalues = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function choice<T>(values:ArrayLike<T>):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\tlet len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _choice(copy(values));\r\n\t}\r\n\r\n\texport function chooseFrom<T>(arg:T, ...args:T[]):InfiniteLinqEnumerable<T>\r\n\texport function chooseFrom<T>(...args:T[]):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!args.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _choice(args);\r\n\t}\r\n\r\n\tfunction _cycle<T>(values:T[]):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\treturn new InfiniteLinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t}, // Reinitialize the value just in case the enumerator is restarted.\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!values);\r\n\t\t\t\t\t\tif(index>=values.length) index = 0;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(values[index++]);\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvalues.length = 0;\r\n\t\t\t\tvalues = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function cycle<T>(values:ArrayLike<T>):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\tlet len = values && values.length;\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!len || !isFinite(len))\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\t// Make a copy to avoid modifying the collection as we go.\r\n\t\treturn _cycle(copy(values));\r\n\t}\r\n\r\n\texport function cycleThrough<T>(arg:T, ...args:T[]):InfiniteLinqEnumerable<T>\r\n\texport function cycleThrough<T>(...args:T[]):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\t// We could return empty if no length, but that would break the typing and produce unexpected results.\r\n\t\t// Enforcing that there must be at least 1 choice is key.\r\n\t\tif(!args.length)\r\n\t\t\tthrow new ArgumentOutOfRangeException('length', length);\r\n\r\n\t\treturn _cycle(args);\r\n\t}\r\n\r\n\texport function empty<T>():FiniteEnumerable<T>\r\n\t{\r\n\t\t// Could be single export function instance, but for safety, we'll make a new one.\r\n\t\treturn new FiniteEnumerable<T>(getEmptyEnumerator);\r\n\t}\r\n\r\n\texport function repeat<T>(element:T):InfiniteLinqEnumerable<T>;\r\n\texport function repeat<T>(element:T, count:number):FiniteEnumerable<T>;\r\n\texport function repeat<T>(element:T, count:number = Infinity):LinqEnumerable<T>\r\n\t{\r\n\t\tif(!(count>0))\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet c:number = count;\r\n\t\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() => { index = 0; },\r\n\t\t\t\t\t\t(yielder) => (index++<c) && yielder.yieldReturn(element),\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t: new LinqEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t\tnew EnumeratorBase<T>(\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t(yielder) => yielder.yieldReturn(element),\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t)\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * DEPRECATED This method began to not make sense in so many ways.\r\n\t * @deprecated since version 4.2\r\n\t * @param initializer\r\n\t * @param finalizer\r\n\t */\r\n\t// Note: this enumeration is endless but can be disposed/cancelled and finalized.\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer:Closure):InfiniteLinqEnumerable<T>\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer?:Action<T>):InfiniteLinqEnumerable<T>\r\n\texport function repeatWithFinalize<T>(\r\n\t\tinitializer:() => T,\r\n\t\tfinalizer?:Action<T>):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\tif(!initializer)\r\n\t\t\tthrow new ArgumentNullException(\"initializer\");\r\n\r\n\t\treturn new InfiniteLinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet element:T;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\t\telement = initializer();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn initializer\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(element)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\telement = NULL;\r\n\t\t\t\t\t\tif(finalizer) finalizer(element);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tinitializer = NULL;\r\n\t\t\t\tfinalizer = VOID0;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an enumerable of one element.\r\n\t * @param element\r\n\t * @returns {FiniteEnumerable<T>}\r\n\t */\r\n\texport function make<T>(element:T):FiniteEnumerable<T>\r\n\t{\r\n\t\treturn repeat<T>(element, 1);\r\n\t}\r\n\r\n// start and step can be other than integer.\r\n\r\n\texport function range(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!(count>0))\r\n\t\t\treturn empty<number>();\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\tInteger.assert(count, \"count\");\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\t\t\t\tlet c:number = count; // Force integer evaluation.\r\n\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet result:boolean =\r\n\t\t\t\t\t\t\t    index++<c\r\n\t\t\t\t\t\t\t    && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result && index<count)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n\r\n\texport function rangeDown(\r\n\t\tstart:number,\r\n\t\tcount:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tstep = Math.abs(step)* -1;\r\n\r\n\t\treturn range(start, count, step);\r\n\t}\r\n\r\n// step = -1 behaves the same as toNegativeInfinity;\r\n\texport function toInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number  = 1):InfiniteLinqEnumerable<number>\r\n\t{\r\n\t\tif(!isFinite(start))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"start\", start, \"Must be a finite number.\");\r\n\r\n\t\tif(!step)\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a valid value\");\r\n\r\n\t\tif(!isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite number.\");\r\n\r\n\t\treturn new InfiniteLinqEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvalue = start;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet current:number = value;\r\n\t\t\t\t\t\tvalue += step;\r\n\t\t\t\t\t\treturn yielder.yieldReturn(current);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function toNegativeInfinity(\r\n\t\tstart:number = 0,\r\n\t\tstep:number  = 1):InfiniteLinqEnumerable<number>\r\n\t{\r\n\t\treturn toInfinity(start, -step);\r\n\t}\r\n\r\n\texport function rangeTo(\r\n\t\tstart:number,\r\n\t\tto:number,\r\n\t\tstep:number = 1):FiniteEnumerable<number>\r\n\t{\r\n\t\tif(isNaN(to) || !isFinite(to))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"to\", to, \"Must be a finite number.\");\r\n\r\n\t\tif(step && !isFinite(step))\r\n\t\t\tthrow new ArgumentOutOfRangeException(\"step\", step, \"Must be a finite non-zero number.\");\r\n\r\n// This way we adjust for the delta from start and to so the user can say +/- step and it will work as expected.\r\n\t\tstep = Math.abs(step);\r\n\r\n\t\treturn new FiniteEnumerable<number>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet value:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<number>(() => { value = start; },\r\n\t\t\t\t\tstart<to\r\n\t\t\t\t\t\t? yielder =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet result:boolean = value<=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue += step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t: yielder =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet result:boolean = value>=to && yielder.yieldReturn(value);\r\n\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t\tvalue -= step;\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t, false);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function matches(\r\n\t\tinput:string, pattern:any,\r\n\t\tflags:string = \"\"):FiniteEnumerable<RegExpExecArray>\r\n\t{\r\n\t\tif(input==null)\r\n\t\t\tthrow new ArgumentNullException(\"input\");\r\n\t\tconst type = typeof input;\r\n\t\tif(type!=Type.STRING)\r\n\t\t\tthrow new Error(\"Cannot exec RegExp matches of type '\" + type + \"'.\");\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tflags += (pattern.ignoreCase) ? \"i\" : \"\";\r\n\t\t\tflags += (pattern.multiline) ? \"m\" : \"\";\r\n\t\t\tpattern = pattern.source;\r\n\t\t}\r\n\r\n\t\tif(flags.indexOf(\"g\")=== -1) flags += \"g\";\r\n\r\n\t\treturn new FiniteEnumerable<RegExpExecArray>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet regex:RegExp;\r\n\t\t\t\treturn new EnumeratorBase<RegExpExecArray>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tregex = new RegExp(pattern, flags);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calling regex.exec consecutively on the same input uses the lastIndex to start the next match.\r\n\t\t\t\t\t\tlet match = regex.exec(input);\r\n\t\t\t\t\t\treturn match!=null\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(match)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function generate<T>(factory:() => T):InfiniteLinqEnumerable<T>;\r\n\texport function generate<T>(factory:() => T, count:number):FiniteEnumerable<T>;\r\n\texport function generate<T>(factory:(index:number) => T):InfiniteLinqEnumerable<T>;\r\n\texport function generate<T>(factory:(index:number) => T, count:number):FiniteEnumerable<T>;\r\n\texport function generate<T>(\r\n\t\tfactory:Function,\r\n\t\tcount:number = Infinity):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\tif(!factory)\r\n\t\t\tthrow new ArgumentNullException(\"factory\");\r\n\r\n\t\tif(isNaN(count) || count<=0)\r\n\t\t\treturn Enumerable.empty<T>();\r\n\r\n\t\treturn isFinite(count) && Integer.assert(count, \"count\")\r\n\t\t\t? new FiniteEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet c:number = count;\r\n\t\t\t\t\tlet index:number = 0;\r\n\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(!factory);\r\n\t\t\t\t\t\t\tlet current:number = index++;\r\n\t\t\t\t\t\t\treturn current<c && yielder.yieldReturn(factory(current));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\tfalse\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfactory = NULL;\r\n\t\t\t\t})\r\n\t\t\t: new InfiniteLinqEnumerable<T>(\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet index:number = 0;\r\n\t\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrowIfDisposed(!factory);\r\n\t\t\t\t\t\t\treturn yielder.yieldReturn(factory(index++));\r\n\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t\t);\r\n\t\t\t\t},\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfactory = NULL;\r\n\t\t\t\t});\r\n\t}\r\n\r\n\r\n\texport module random\r\n\t{\r\n\t\texport function floats(maxExclusive:number = 1):InfiniteLinqEnumerable<number>\r\n\t\t{\r\n\t\t\treturn generate(Random.generate(maxExclusive));\r\n\t\t}\r\n\r\n\t\texport function integers(boundary:number, inclusive?:boolean):InfiniteLinqEnumerable<number>\r\n\t\t{\r\n\t\t\treturn generate(Random.generate.integers(boundary, inclusive));\r\n\t\t}\r\n\t}\r\n\r\n\texport function unfold<T>(\r\n\t\tseed:T,\r\n\t\tvalueFactory:SelectorWithIndex<T, T>,\r\n\t\tskipSeed:Boolean = false):InfiniteLinqEnumerable<T>\r\n\t{\r\n\t\tif(!valueFactory)\r\n\t\t\tthrow new ArgumentNullException(\"factory\");\r\n\r\n\t\treturn new InfiniteLinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet index:number = 0;\r\n\t\t\t\tlet value:T;\r\n\t\t\t\tlet isFirst:boolean;\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tvalue = seed;\r\n\t\t\t\t\t\tisFirst = !skipSeed;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(!valueFactory);\r\n\t\t\t\t\t\tlet i = index++;\r\n\t\t\t\t\t\tif(isFirst)\r\n\t\t\t\t\t\t\tisFirst = false;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvalue = valueFactory(value, i);\r\n\t\t\t\t\t\treturn yielder.yieldReturn(value);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\ttrue // Is endless!\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvalueFactory = NULL;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\texport function forEach<T>(\r\n\t\te:ForEachEnumerable<T>,\r\n\t\taction:ActionWithIndex<T>,\r\n\t\tmax?:number):number\r\n\r\n\texport function forEach<T>(\r\n\t\te:ForEachEnumerable<T>,\r\n\t\taction:PredicateWithIndex<T>,\r\n\t\tmax?:number):number\r\n\r\n\texport function forEach<T>(\r\n\t\tenumerable:ForEachEnumerable<T>,\r\n\t\taction:ActionWithIndex<T> | PredicateWithIndex<T>,\r\n\t\tmax:number = Infinity):number\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn enumUtil.forEach(enumerable, action, max);\r\n\t}\r\n\r\n\texport function map<T, TResult>(\r\n\t\tenumerable:ForEachEnumerable<T>,\r\n\t\tselector:SelectorWithIndex<T, TResult>):TResult[]\r\n\t{\r\n\t\t// Will properly dispose created enumerable.\r\n\t\t// Will throw if enumerable is endless.\r\n\t\treturn enumUtil.map(enumerable, selector);\r\n\t}\r\n\r\n// Slightly optimized versions for numbers.\r\n\texport function max(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tconst v = values\r\n\t\t\t.takeUntil(v => v== +Infinity, true)\r\n\t\t\t.aggregate(Functions.Greater);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\texport function min(values:FiniteEnumerable<number>):number\r\n\t{\r\n\t\tconst v = values\r\n\t\t\t.takeUntil(v => v== -Infinity, true)\r\n\t\t\t.aggregate(Functions.Lesser);\r\n\r\n\t\treturn v===VOID0 ? NaN : v;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Takes any set of collections of the same type and weaves them together.\r\n\t * @param enumerables\r\n\t * @returns {Enumerable<T>}\r\n\t */\r\n\texport function weave<T>(\r\n\t\tenumerables:ForEachEnumerable<ForEachEnumerable<T>>):LinqEnumerable<T>\r\n\t{\r\n\t\tif(!enumerables)\r\n\t\t\tthrow new ArgumentNullException('enumerables');\r\n\r\n\t\tlet disposed = false;\r\n\t\treturn new LinqEnumerable<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet queue:Queue<IEnumerator<T>>;\r\n\t\t\t\tlet mainEnumerator:IEnumerator<ForEachEnumerable<T>> | null;\r\n\t\t\t\tlet index:number;\r\n\r\n\t\t\t\treturn new EnumeratorBase<T>(\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\tqueue = new Queue<IEnumerator<T>>();\r\n\t\t\t\t\t\tmainEnumerator = enumUtil.from(enumerables);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t(yielder) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthrowIfDisposed(disposed);\r\n\t\t\t\t\t\tlet e:IEnumerator<T> | null = null;\r\n\r\n\t\t\t\t\t\t// First pass...\r\n\t\t\t\t\t\tif(mainEnumerator)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twhile(!e && mainEnumerator.moveNext())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet c = mainEnumerator.current;\r\n\t\t\t\t\t\t\t\te = nextEnumerator(queue, c ? enumUtil.from(c) : NULL);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(!e)\r\n\t\t\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(!e && queue.tryDequeue(value =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\te = nextEnumerator(queue, enumUtil.from<T>(value));\r\n\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t{ }\r\n\r\n\t\t\t\t\t\treturn e\r\n\t\t\t\t\t\t\t? yielder.yieldReturn(e.current)\r\n\t\t\t\t\t\t\t: yielder.yieldBreak();\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t() =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(queue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdispose.these.noCopy(queue.dump());\r\n\t\t\t\t\t\t\tqueue = NULL;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(mainEnumerator) mainEnumerator.dispose();\r\n\t\t\t\t\t\tmainEnumerator = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tdisposed = true;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Enumerable;\r\n"]}